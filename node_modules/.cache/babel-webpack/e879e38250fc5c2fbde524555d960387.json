{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/metadata_resolver\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/aot/static_symbol\", \"@angular/compiler/src/aot/util\", \"@angular/compiler/src/assertions\", \"@angular/compiler/src/compile_metadata\", \"@angular/compiler/src/core\", \"@angular/compiler/src/directive_resolver\", \"@angular/compiler/src/identifiers\", \"@angular/compiler/src/lifecycle_reflector\", \"@angular/compiler/src/selector\", \"@angular/compiler/src/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CompileMetadataResolver = exports.getMissingNgModuleMetadataErrorData = exports.ERROR_COMPONENT_TYPE = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var static_symbol_1 = require(\"@angular/compiler/src/aot/static_symbol\");\n\n  var util_1 = require(\"@angular/compiler/src/aot/util\");\n\n  var assertions_1 = require(\"@angular/compiler/src/assertions\");\n\n  var cpl = require(\"@angular/compiler/src/compile_metadata\");\n\n  var core_1 = require(\"@angular/compiler/src/core\");\n\n  var directive_resolver_1 = require(\"@angular/compiler/src/directive_resolver\");\n\n  var identifiers_1 = require(\"@angular/compiler/src/identifiers\");\n\n  var lifecycle_reflector_1 = require(\"@angular/compiler/src/lifecycle_reflector\");\n\n  var selector_1 = require(\"@angular/compiler/src/selector\");\n\n  var util_2 = require(\"@angular/compiler/src/util\");\n\n  exports.ERROR_COMPONENT_TYPE = 'ngComponentType';\n  var MISSING_NG_MODULE_METADATA_ERROR_DATA = 'ngMissingNgModuleMetadataErrorData';\n\n  function getMissingNgModuleMetadataErrorData(error) {\n    var _a;\n\n    return (_a = error[MISSING_NG_MODULE_METADATA_ERROR_DATA]) !== null && _a !== void 0 ? _a : null;\n  }\n\n  exports.getMissingNgModuleMetadataErrorData = getMissingNgModuleMetadataErrorData; // Design notes:\n  // - don't lazily create metadata:\n  //   For some metadata, we need to do async work sometimes,\n  //   so the user has to kick off this loading.\n  //   But we want to report errors even when the async work is\n  //   not required to check that the user would have been able\n  //   to wait correctly.\n\n  var CompileMetadataResolver =\n  /** @class */\n  function () {\n    function CompileMetadataResolver(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {\n      this._config = _config;\n      this._htmlParser = _htmlParser;\n      this._ngModuleResolver = _ngModuleResolver;\n      this._directiveResolver = _directiveResolver;\n      this._pipeResolver = _pipeResolver;\n      this._summaryResolver = _summaryResolver;\n      this._schemaRegistry = _schemaRegistry;\n      this._directiveNormalizer = _directiveNormalizer;\n      this._console = _console;\n      this._staticSymbolCache = _staticSymbolCache;\n      this._reflector = _reflector;\n      this._errorCollector = _errorCollector;\n      this._nonNormalizedDirectiveCache = new Map();\n      this._directiveCache = new Map();\n      this._summaryCache = new Map();\n      this._pipeCache = new Map();\n      this._ngModuleCache = new Map();\n      this._ngModuleOfTypes = new Map();\n      this._shallowModuleCache = new Map();\n    }\n\n    CompileMetadataResolver.prototype.getReflector = function () {\n      return this._reflector;\n    };\n\n    CompileMetadataResolver.prototype.clearCacheFor = function (type) {\n      var dirMeta = this._directiveCache.get(type);\n\n      this._directiveCache.delete(type);\n\n      this._nonNormalizedDirectiveCache.delete(type);\n\n      this._summaryCache.delete(type);\n\n      this._pipeCache.delete(type);\n\n      this._ngModuleOfTypes.delete(type); // Clear all of the NgModule as they contain transitive information!\n\n\n      this._ngModuleCache.clear();\n\n      if (dirMeta) {\n        this._directiveNormalizer.clearCacheFor(dirMeta);\n      }\n    };\n\n    CompileMetadataResolver.prototype.clearCache = function () {\n      this._directiveCache.clear();\n\n      this._nonNormalizedDirectiveCache.clear();\n\n      this._summaryCache.clear();\n\n      this._pipeCache.clear();\n\n      this._ngModuleCache.clear();\n\n      this._ngModuleOfTypes.clear();\n\n      this._directiveNormalizer.clearCache();\n    };\n\n    CompileMetadataResolver.prototype._createProxyClass = function (baseType, name) {\n      var delegate = null;\n\n      var proxyClass = function () {\n        if (!delegate) {\n          throw new Error(\"Illegal state: Class \" + name + \" for type \" + util_2.stringify(baseType) + \" is not compiled yet!\");\n        }\n\n        return delegate.apply(this, arguments);\n      };\n\n      proxyClass.setDelegate = function (d) {\n        delegate = d;\n        proxyClass.prototype = d.prototype;\n      }; // Make stringify work correctly\n\n\n      proxyClass.overriddenName = name;\n      return proxyClass;\n    };\n\n    CompileMetadataResolver.prototype.getGeneratedClass = function (dirType, name) {\n      if (dirType instanceof static_symbol_1.StaticSymbol) {\n        return this._staticSymbolCache.get(util_1.ngfactoryFilePath(dirType.filePath), name);\n      } else {\n        return this._createProxyClass(dirType, name);\n      }\n    };\n\n    CompileMetadataResolver.prototype.getComponentViewClass = function (dirType) {\n      return this.getGeneratedClass(dirType, cpl.viewClassName(dirType, 0));\n    };\n\n    CompileMetadataResolver.prototype.getHostComponentViewClass = function (dirType) {\n      return this.getGeneratedClass(dirType, cpl.hostViewClassName(dirType));\n    };\n\n    CompileMetadataResolver.prototype.getHostComponentType = function (dirType) {\n      var name = cpl.identifierName({\n        reference: dirType\n      }) + \"_Host\";\n\n      if (dirType instanceof static_symbol_1.StaticSymbol) {\n        return this._staticSymbolCache.get(dirType.filePath, name);\n      }\n\n      return this._createProxyClass(dirType, name);\n    };\n\n    CompileMetadataResolver.prototype.getRendererType = function (dirType) {\n      if (dirType instanceof static_symbol_1.StaticSymbol) {\n        return this._staticSymbolCache.get(util_1.ngfactoryFilePath(dirType.filePath), cpl.rendererTypeName(dirType));\n      } else {\n        // returning an object as proxy,\n        // that we fill later during runtime compilation.\n        return {};\n      }\n    };\n\n    CompileMetadataResolver.prototype.getComponentFactory = function (selector, dirType, inputs, outputs) {\n      if (dirType instanceof static_symbol_1.StaticSymbol) {\n        return this._staticSymbolCache.get(util_1.ngfactoryFilePath(dirType.filePath), cpl.componentFactoryName(dirType));\n      } else {\n        var hostView = this.getHostComponentViewClass(dirType); // Note: ngContentSelectors will be filled later once the template is\n        // loaded.\n\n        var createComponentFactory = this._reflector.resolveExternalReference(identifiers_1.Identifiers.createComponentFactory);\n\n        return createComponentFactory(selector, dirType, hostView, inputs, outputs, []);\n      }\n    };\n\n    CompileMetadataResolver.prototype.initComponentFactory = function (factory, ngContentSelectors) {\n      var _a;\n\n      if (!(factory instanceof static_symbol_1.StaticSymbol)) {\n        (_a = factory.ngContentSelectors).push.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(ngContentSelectors)));\n      }\n    };\n\n    CompileMetadataResolver.prototype._loadSummary = function (type, kind) {\n      var typeSummary = this._summaryCache.get(type);\n\n      if (!typeSummary) {\n        var summary = this._summaryResolver.resolveSummary(type);\n\n        typeSummary = summary ? summary.type : null;\n\n        this._summaryCache.set(type, typeSummary || null);\n      }\n\n      return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n    };\n\n    CompileMetadataResolver.prototype.getHostComponentMetadata = function (compMeta, hostViewType) {\n      var hostType = this.getHostComponentType(compMeta.type.reference);\n\n      if (!hostViewType) {\n        hostViewType = this.getHostComponentViewClass(hostType);\n      } // Note: ! is ok here as this method should only be called with normalized directive\n      // metadata, which always fills in the selector.\n\n\n      var template = selector_1.CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();\n      var templateUrl = '';\n\n      var htmlAst = this._htmlParser.parse(template, templateUrl);\n\n      return cpl.CompileDirectiveMetadata.create({\n        isHost: true,\n        type: {\n          reference: hostType,\n          diDeps: [],\n          lifecycleHooks: []\n        },\n        template: new cpl.CompileTemplateMetadata({\n          encapsulation: core_1.ViewEncapsulation.None,\n          template: template,\n          templateUrl: templateUrl,\n          htmlAst: htmlAst,\n          styles: [],\n          styleUrls: [],\n          ngContentSelectors: [],\n          animations: [],\n          isInline: true,\n          externalStylesheets: [],\n          interpolation: null,\n          preserveWhitespaces: false\n        }),\n        exportAs: null,\n        changeDetection: core_1.ChangeDetectionStrategy.Default,\n        inputs: [],\n        outputs: [],\n        host: {},\n        isComponent: true,\n        selector: '*',\n        providers: [],\n        viewProviders: [],\n        queries: [],\n        guards: {},\n        viewQueries: [],\n        componentViewType: hostViewType,\n        rendererType: {\n          id: '__Host__',\n          encapsulation: core_1.ViewEncapsulation.None,\n          styles: [],\n          data: {}\n        },\n        entryComponents: [],\n        componentFactory: null\n      });\n    };\n\n    CompileMetadataResolver.prototype.loadDirectiveMetadata = function (ngModuleType, directiveType, isSync) {\n      var _this = this;\n\n      if (this._directiveCache.has(directiveType)) {\n        return null;\n      }\n\n      directiveType = util_2.resolveForwardRef(directiveType);\n\n      var _a = this.getNonNormalizedDirectiveMetadata(directiveType),\n          annotation = _a.annotation,\n          metadata = _a.metadata;\n\n      var createDirectiveMetadata = function (templateMetadata) {\n        var normalizedDirMeta = new cpl.CompileDirectiveMetadata({\n          isHost: false,\n          type: metadata.type,\n          isComponent: metadata.isComponent,\n          selector: metadata.selector,\n          exportAs: metadata.exportAs,\n          changeDetection: metadata.changeDetection,\n          inputs: metadata.inputs,\n          outputs: metadata.outputs,\n          hostListeners: metadata.hostListeners,\n          hostProperties: metadata.hostProperties,\n          hostAttributes: metadata.hostAttributes,\n          providers: metadata.providers,\n          viewProviders: metadata.viewProviders,\n          queries: metadata.queries,\n          guards: metadata.guards,\n          viewQueries: metadata.viewQueries,\n          entryComponents: metadata.entryComponents,\n          componentViewType: metadata.componentViewType,\n          rendererType: metadata.rendererType,\n          componentFactory: metadata.componentFactory,\n          template: templateMetadata\n        });\n\n        if (templateMetadata) {\n          _this.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors);\n        }\n\n        _this._directiveCache.set(directiveType, normalizedDirMeta);\n\n        _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n\n        return null;\n      };\n\n      if (metadata.isComponent) {\n        var template = metadata.template;\n\n        var templateMeta = this._directiveNormalizer.normalizeTemplate({\n          ngModuleType: ngModuleType,\n          componentType: directiveType,\n          moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\n          encapsulation: template.encapsulation,\n          template: template.template,\n          templateUrl: template.templateUrl,\n          styles: template.styles,\n          styleUrls: template.styleUrls,\n          animations: template.animations,\n          interpolation: template.interpolation,\n          preserveWhitespaces: template.preserveWhitespaces\n        });\n\n        if (util_2.isPromise(templateMeta) && isSync) {\n          this._reportError(componentStillLoadingError(directiveType), directiveType);\n\n          return null;\n        }\n\n        return util_2.SyncAsync.then(templateMeta, createDirectiveMetadata);\n      } else {\n        // directive\n        createDirectiveMetadata(null);\n        return null;\n      }\n    };\n\n    CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {\n      var _this = this;\n\n      directiveType = util_2.resolveForwardRef(directiveType);\n\n      if (!directiveType) {\n        return null;\n      }\n\n      var cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n\n      if (cacheEntry) {\n        return cacheEntry;\n      }\n\n      var dirMeta = this._directiveResolver.resolve(directiveType, false);\n\n      if (!dirMeta) {\n        return null;\n      }\n\n      var nonNormalizedTemplateMetadata = undefined;\n\n      if (core_1.createComponent.isTypeOf(dirMeta)) {\n        // component\n        var compMeta = dirMeta;\n        assertions_1.assertArrayOfStrings('styles', compMeta.styles);\n        assertions_1.assertArrayOfStrings('styleUrls', compMeta.styleUrls);\n        assertions_1.assertInterpolationSymbols('interpolation', compMeta.interpolation);\n        var animations = compMeta.animations;\n        nonNormalizedTemplateMetadata = new cpl.CompileTemplateMetadata({\n          encapsulation: util_2.noUndefined(compMeta.encapsulation),\n          template: util_2.noUndefined(compMeta.template),\n          templateUrl: util_2.noUndefined(compMeta.templateUrl),\n          htmlAst: null,\n          styles: compMeta.styles || [],\n          styleUrls: compMeta.styleUrls || [],\n          animations: animations || [],\n          interpolation: util_2.noUndefined(compMeta.interpolation),\n          isInline: !!compMeta.template,\n          externalStylesheets: [],\n          ngContentSelectors: [],\n          preserveWhitespaces: util_2.noUndefined(dirMeta.preserveWhitespaces)\n        });\n      }\n\n      var changeDetectionStrategy = null;\n      var viewProviders = [];\n      var entryComponentMetadata = [];\n      var selector = dirMeta.selector;\n\n      if (core_1.createComponent.isTypeOf(dirMeta)) {\n        // Component\n        var compMeta = dirMeta;\n        changeDetectionStrategy = compMeta.changeDetection;\n\n        if (compMeta.viewProviders) {\n          viewProviders = this._getProvidersMetadata(compMeta.viewProviders, entryComponentMetadata, \"viewProviders for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n        }\n\n        if (compMeta.entryComponents) {\n          entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents).map(function (type) {\n            return _this._getEntryComponentMetadata(type);\n          }).concat(entryComponentMetadata);\n        }\n\n        if (!selector) {\n          selector = this._schemaRegistry.getDefaultComponentElementName();\n        }\n      } else {\n        // Directive\n        if (!selector) {\n          selector = null;\n        }\n      }\n\n      var providers = [];\n\n      if (dirMeta.providers != null) {\n        providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, \"providers for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n      }\n\n      var queries = [];\n      var viewQueries = [];\n\n      if (dirMeta.queries != null) {\n        queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n        viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n      }\n\n      var metadata = cpl.CompileDirectiveMetadata.create({\n        isHost: false,\n        selector: selector,\n        exportAs: util_2.noUndefined(dirMeta.exportAs),\n        isComponent: !!nonNormalizedTemplateMetadata,\n        type: this._getTypeMetadata(directiveType),\n        template: nonNormalizedTemplateMetadata,\n        changeDetection: changeDetectionStrategy,\n        inputs: dirMeta.inputs || [],\n        outputs: dirMeta.outputs || [],\n        host: dirMeta.host || {},\n        providers: providers || [],\n        viewProviders: viewProviders || [],\n        queries: queries || [],\n        guards: dirMeta.guards || {},\n        viewQueries: viewQueries || [],\n        entryComponents: entryComponentMetadata,\n        componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) : null,\n        rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\n        componentFactory: null\n      });\n\n      if (nonNormalizedTemplateMetadata) {\n        metadata.componentFactory = this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\n      }\n\n      cacheEntry = {\n        metadata: metadata,\n        annotation: dirMeta\n      };\n\n      this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n\n      return cacheEntry;\n    };\n    /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n\n\n    CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {\n      var dirMeta = this._directiveCache.get(directiveType);\n\n      if (!dirMeta) {\n        this._reportError(util_2.syntaxError(\"Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive \" + stringifyType(directiveType) + \".\"), directiveType);\n      }\n\n      return dirMeta;\n    };\n\n    CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {\n      var dirSummary = this._loadSummary(dirType, cpl.CompileSummaryKind.Directive);\n\n      if (!dirSummary) {\n        this._reportError(util_2.syntaxError(\"Illegal state: Could not load the summary for directive \" + stringifyType(dirType) + \".\"), dirType);\n      }\n\n      return dirSummary;\n    };\n\n    CompileMetadataResolver.prototype.isDirective = function (type) {\n      return !!this._loadSummary(type, cpl.CompileSummaryKind.Directive) || this._directiveResolver.isDirective(type);\n    };\n\n    CompileMetadataResolver.prototype.isAbstractDirective = function (type) {\n      var summary = this._loadSummary(type, cpl.CompileSummaryKind.Directive);\n\n      if (summary && !summary.isComponent) {\n        return !summary.selector;\n      }\n\n      var meta = this._directiveResolver.resolve(type, false);\n\n      if (meta && !core_1.createComponent.isTypeOf(meta)) {\n        return !meta.selector;\n      }\n\n      return false;\n    };\n\n    CompileMetadataResolver.prototype.isPipe = function (type) {\n      return !!this._loadSummary(type, cpl.CompileSummaryKind.Pipe) || this._pipeResolver.isPipe(type);\n    };\n\n    CompileMetadataResolver.prototype.isNgModule = function (type) {\n      return !!this._loadSummary(type, cpl.CompileSummaryKind.NgModule) || this._ngModuleResolver.isNgModule(type);\n    };\n\n    CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType, alreadyCollecting) {\n      if (alreadyCollecting === void 0) {\n        alreadyCollecting = null;\n      }\n\n      var moduleSummary = this._loadSummary(moduleType, cpl.CompileSummaryKind.NgModule);\n\n      if (!moduleSummary) {\n        var moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\n        moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n\n        if (moduleSummary) {\n          this._summaryCache.set(moduleType, moduleSummary);\n        }\n      }\n\n      return moduleSummary;\n    };\n    /**\n     * Loads the declared directives and pipes of an NgModule.\n     */\n\n\n    CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {\n      var _this = this;\n\n      if (throwIfNotFound === void 0) {\n        throwIfNotFound = true;\n      }\n\n      var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n      var loading = [];\n\n      if (ngModule) {\n        ngModule.declaredDirectives.forEach(function (id) {\n          var promise = _this.loadDirectiveMetadata(moduleType, id.reference, isSync);\n\n          if (promise) {\n            loading.push(promise);\n          }\n        });\n        ngModule.declaredPipes.forEach(function (id) {\n          return _this._loadPipeMetadata(id.reference);\n        });\n      }\n\n      return Promise.all(loading);\n    };\n\n    CompileMetadataResolver.prototype.getShallowModuleMetadata = function (moduleType) {\n      var compileMeta = this._shallowModuleCache.get(moduleType);\n\n      if (compileMeta) {\n        return compileMeta;\n      }\n\n      var ngModuleMeta = directive_resolver_1.findLast(this._reflector.shallowAnnotations(moduleType), core_1.createNgModule.isTypeOf);\n      compileMeta = {\n        type: this._getTypeMetadata(moduleType),\n        rawExports: ngModuleMeta.exports,\n        rawImports: ngModuleMeta.imports,\n        rawProviders: ngModuleMeta.providers\n      };\n\n      this._shallowModuleCache.set(moduleType, compileMeta);\n\n      return compileMeta;\n    };\n\n    CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound, alreadyCollecting) {\n      var _this = this;\n\n      if (throwIfNotFound === void 0) {\n        throwIfNotFound = true;\n      }\n\n      if (alreadyCollecting === void 0) {\n        alreadyCollecting = null;\n      }\n\n      moduleType = util_2.resolveForwardRef(moduleType);\n\n      var compileMeta = this._ngModuleCache.get(moduleType);\n\n      if (compileMeta) {\n        return compileMeta;\n      }\n\n      var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n\n      if (!meta) {\n        return null;\n      }\n\n      var declaredDirectives = [];\n      var exportedNonModuleIdentifiers = [];\n      var declaredPipes = [];\n      var importedModules = [];\n      var exportedModules = [];\n      var providers = [];\n      var entryComponents = [];\n      var bootstrapComponents = [];\n      var schemas = [];\n\n      if (meta.imports) {\n        flattenAndDedupeArray(meta.imports).forEach(function (importedType) {\n          var importedModuleType = undefined;\n\n          if (isValidType(importedType)) {\n            importedModuleType = importedType;\n          } else if (importedType && importedType.ngModule) {\n            var moduleWithProviders = importedType;\n            importedModuleType = moduleWithProviders.ngModule;\n\n            if (moduleWithProviders.providers) {\n              providers.push.apply(providers, tslib_1.__spreadArray([], tslib_1.__read(_this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(importedModuleType) + \"'\", [], importedType))));\n            }\n          }\n\n          if (importedModuleType) {\n            if (_this._checkSelfImport(moduleType, importedModuleType)) return;\n            if (!alreadyCollecting) alreadyCollecting = new Set();\n\n            if (alreadyCollecting.has(importedModuleType)) {\n              _this._reportError(util_2.syntaxError(_this._getTypeDescriptor(importedModuleType) + \" '\" + stringifyType(importedType) + \"' is imported recursively by the module '\" + stringifyType(moduleType) + \"'.\"), moduleType);\n\n              return;\n            }\n\n            alreadyCollecting.add(importedModuleType);\n\n            var importedModuleSummary = _this.getNgModuleSummary(importedModuleType, alreadyCollecting);\n\n            alreadyCollecting.delete(importedModuleType);\n\n            if (!importedModuleSummary) {\n              var err = util_2.syntaxError(\"Unexpected \" + _this._getTypeDescriptor(importedType) + \" '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'. Please add a @NgModule annotation.\"); // If possible, record additional context for this error to enable more useful\n              // diagnostics on the compiler side.\n\n              if (importedType instanceof static_symbol_1.StaticSymbol) {\n                err[MISSING_NG_MODULE_METADATA_ERROR_DATA] = {\n                  fileName: importedType.filePath,\n                  className: importedType.name\n                };\n              }\n\n              _this._reportError(err, moduleType);\n\n              return;\n            }\n\n            importedModules.push(importedModuleSummary);\n          } else {\n            _this._reportError(util_2.syntaxError(\"Unexpected value '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n\n            return;\n          }\n        });\n      }\n\n      if (meta.exports) {\n        flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {\n          if (!isValidType(exportedType)) {\n            _this._reportError(util_2.syntaxError(\"Unexpected value '\" + stringifyType(exportedType) + \"' exported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n\n            return;\n          }\n\n          if (!alreadyCollecting) alreadyCollecting = new Set();\n\n          if (alreadyCollecting.has(exportedType)) {\n            _this._reportError(util_2.syntaxError(_this._getTypeDescriptor(exportedType) + \" '\" + util_2.stringify(exportedType) + \"' is exported recursively by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n\n            return;\n          }\n\n          alreadyCollecting.add(exportedType);\n\n          var exportedModuleSummary = _this.getNgModuleSummary(exportedType, alreadyCollecting);\n\n          alreadyCollecting.delete(exportedType);\n\n          if (exportedModuleSummary) {\n            exportedModules.push(exportedModuleSummary);\n          } else {\n            exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));\n          }\n        });\n      } // Note: This will be modified later, so we rely on\n      // getting a new instance every time!\n\n\n      var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n\n      if (meta.declarations) {\n        flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {\n          if (!isValidType(declaredType)) {\n            _this._reportError(util_2.syntaxError(\"Unexpected value '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n\n            return;\n          }\n\n          var declaredIdentifier = _this._getIdentifierMetadata(declaredType);\n\n          if (_this.isDirective(declaredType)) {\n            if (_this.isAbstractDirective(declaredType)) {\n              _this._reportError(util_2.syntaxError(\"Directive \" + stringifyType(declaredType) + \" has no selector, please add it!\"), declaredType);\n            }\n\n            transitiveModule.addDirective(declaredIdentifier);\n            declaredDirectives.push(declaredIdentifier);\n\n            _this._addTypeToModule(declaredType, moduleType);\n          } else if (_this.isPipe(declaredType)) {\n            transitiveModule.addPipe(declaredIdentifier);\n            transitiveModule.pipes.push(declaredIdentifier);\n            declaredPipes.push(declaredIdentifier);\n\n            _this._addTypeToModule(declaredType, moduleType);\n          } else {\n            _this._reportError(util_2.syntaxError(\"Unexpected \" + _this._getTypeDescriptor(declaredType) + \" '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'. Please add a @Pipe/@Directive/@Component annotation.\"), moduleType);\n\n            return;\n          }\n        });\n      }\n\n      var exportedDirectives = [];\n      var exportedPipes = [];\n      exportedNonModuleIdentifiers.forEach(function (exportedId) {\n        if (transitiveModule.directivesSet.has(exportedId.reference)) {\n          exportedDirectives.push(exportedId);\n          transitiveModule.addExportedDirective(exportedId);\n        } else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n          exportedPipes.push(exportedId);\n          transitiveModule.addExportedPipe(exportedId);\n        } else {\n          _this._reportError(util_2.syntaxError(\"Can't export \" + _this._getTypeDescriptor(exportedId.reference) + \" \" + stringifyType(exportedId.reference) + \" from \" + stringifyType(moduleType) + \" as it was neither declared nor imported!\"), moduleType);\n\n          return;\n        }\n      }); // The providers of the module have to go last\n      // so that they overwrite any other provider we already added.\n\n      if (meta.providers) {\n        providers.push.apply(providers, tslib_1.__spreadArray([], tslib_1.__read(this._getProvidersMetadata(meta.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(moduleType) + \"'\", [], moduleType))));\n      }\n\n      if (meta.entryComponents) {\n        entryComponents.push.apply(entryComponents, tslib_1.__spreadArray([], tslib_1.__read(flattenAndDedupeArray(meta.entryComponents).map(function (type) {\n          return _this._getEntryComponentMetadata(type);\n        }))));\n      }\n\n      if (meta.bootstrap) {\n        flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {\n          if (!isValidType(type)) {\n            _this._reportError(util_2.syntaxError(\"Unexpected value '\" + stringifyType(type) + \"' used in the bootstrap property of module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n\n            return;\n          }\n\n          bootstrapComponents.push(_this._getIdentifierMetadata(type));\n        });\n      }\n\n      entryComponents.push.apply(entryComponents, tslib_1.__spreadArray([], tslib_1.__read(bootstrapComponents.map(function (type) {\n        return _this._getEntryComponentMetadata(type.reference);\n      }))));\n\n      if (meta.schemas) {\n        schemas.push.apply(schemas, tslib_1.__spreadArray([], tslib_1.__read(flattenAndDedupeArray(meta.schemas))));\n      }\n\n      compileMeta = new cpl.CompileNgModuleMetadata({\n        type: this._getTypeMetadata(moduleType),\n        providers: providers,\n        entryComponents: entryComponents,\n        bootstrapComponents: bootstrapComponents,\n        schemas: schemas,\n        declaredDirectives: declaredDirectives,\n        exportedDirectives: exportedDirectives,\n        declaredPipes: declaredPipes,\n        exportedPipes: exportedPipes,\n        importedModules: importedModules,\n        exportedModules: exportedModules,\n        transitiveModule: transitiveModule,\n        id: meta.id || null\n      });\n      entryComponents.forEach(function (id) {\n        return transitiveModule.addEntryComponent(id);\n      });\n      providers.forEach(function (provider) {\n        return transitiveModule.addProvider(provider, compileMeta.type);\n      });\n      transitiveModule.addModule(compileMeta.type);\n\n      this._ngModuleCache.set(moduleType, compileMeta);\n\n      return compileMeta;\n    };\n\n    CompileMetadataResolver.prototype._checkSelfImport = function (moduleType, importedModuleType) {\n      if (moduleType === importedModuleType) {\n        this._reportError(util_2.syntaxError(\"'\" + stringifyType(moduleType) + \"' module can't import itself\"), moduleType);\n\n        return true;\n      }\n\n      return false;\n    };\n\n    CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {\n      if (isValidType(type)) {\n        if (this.isDirective(type)) {\n          return 'directive';\n        }\n\n        if (this.isPipe(type)) {\n          return 'pipe';\n        }\n\n        if (this.isNgModule(type)) {\n          return 'module';\n        }\n      }\n\n      if (type.provide) {\n        return 'provider';\n      }\n\n      return 'value';\n    };\n\n    CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {\n      var oldModule = this._ngModuleOfTypes.get(type);\n\n      if (oldModule && oldModule !== moduleType) {\n        this._reportError(util_2.syntaxError(\"Type \" + stringifyType(type) + \" is part of the declarations of 2 modules: \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \"! \" + (\"Please consider moving \" + stringifyType(type) + \" to a higher module that imports \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \". \") + (\"You can also create a new NgModule that exports and includes \" + stringifyType(type) + \" then import that NgModule in \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \".\")), moduleType);\n\n        return;\n      }\n\n      this._ngModuleOfTypes.set(type, moduleType);\n    };\n\n    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {\n      // collect `providers` / `entryComponents` from all imported and all exported modules\n      var result = new cpl.TransitiveCompileNgModuleMetadata();\n      var modulesByToken = new Map();\n      importedModules.concat(exportedModules).forEach(function (modSummary) {\n        modSummary.modules.forEach(function (mod) {\n          return result.addModule(mod);\n        });\n        modSummary.entryComponents.forEach(function (comp) {\n          return result.addEntryComponent(comp);\n        });\n        var addedTokens = new Set();\n        modSummary.providers.forEach(function (entry) {\n          var tokenRef = cpl.tokenReference(entry.provider.token);\n          var prevModules = modulesByToken.get(tokenRef);\n\n          if (!prevModules) {\n            prevModules = new Set();\n            modulesByToken.set(tokenRef, prevModules);\n          }\n\n          var moduleRef = entry.module.reference; // Note: the providers of one module may still contain multiple providers\n          // per token (e.g. for multi providers), and we need to preserve these.\n\n          if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n            prevModules.add(moduleRef);\n            addedTokens.add(tokenRef);\n            result.addProvider(entry.provider, entry.module);\n          }\n        });\n      });\n      exportedModules.forEach(function (modSummary) {\n        modSummary.exportedDirectives.forEach(function (id) {\n          return result.addExportedDirective(id);\n        });\n        modSummary.exportedPipes.forEach(function (id) {\n          return result.addExportedPipe(id);\n        });\n      });\n      importedModules.forEach(function (modSummary) {\n        modSummary.exportedDirectives.forEach(function (id) {\n          return result.addDirective(id);\n        });\n        modSummary.exportedPipes.forEach(function (id) {\n          return result.addPipe(id);\n        });\n      });\n      return result;\n    };\n\n    CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {\n      type = util_2.resolveForwardRef(type);\n      return {\n        reference: type\n      };\n    };\n\n    CompileMetadataResolver.prototype.isInjectable = function (type) {\n      var annotations = this._reflector.tryAnnotations(type);\n\n      return annotations.some(function (ann) {\n        return core_1.createInjectable.isTypeOf(ann);\n      });\n    };\n\n    CompileMetadataResolver.prototype.getInjectableSummary = function (type) {\n      return {\n        summaryKind: cpl.CompileSummaryKind.Injectable,\n        type: this._getTypeMetadata(type, null, false)\n      };\n    };\n\n    CompileMetadataResolver.prototype.getInjectableMetadata = function (type, dependencies, throwOnUnknownDeps) {\n      if (dependencies === void 0) {\n        dependencies = null;\n      }\n\n      if (throwOnUnknownDeps === void 0) {\n        throwOnUnknownDeps = true;\n      }\n\n      var typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n\n      var typeMetadata = typeSummary ? typeSummary.type : this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);\n\n      var annotations = this._reflector.annotations(type).filter(function (ann) {\n        return core_1.createInjectable.isTypeOf(ann);\n      });\n\n      if (annotations.length === 0) {\n        return null;\n      }\n\n      var meta = annotations[annotations.length - 1];\n      return {\n        symbol: type,\n        type: typeMetadata,\n        providedIn: meta.providedIn,\n        useValue: meta.useValue,\n        useClass: meta.useClass,\n        useExisting: meta.useExisting,\n        useFactory: meta.useFactory,\n        deps: meta.deps\n      };\n    };\n\n    CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies, throwOnUnknownDeps) {\n      if (dependencies === void 0) {\n        dependencies = null;\n      }\n\n      if (throwOnUnknownDeps === void 0) {\n        throwOnUnknownDeps = true;\n      }\n\n      var identifier = this._getIdentifierMetadata(type);\n\n      return {\n        reference: identifier.reference,\n        diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\n        lifecycleHooks: lifecycle_reflector_1.getAllLifecycleHooks(this._reflector, identifier.reference)\n      };\n    };\n\n    CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {\n      if (dependencies === void 0) {\n        dependencies = null;\n      }\n\n      factory = util_2.resolveForwardRef(factory);\n      return {\n        reference: factory,\n        diDeps: this._getDependenciesMetadata(factory, dependencies)\n      };\n    };\n    /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n\n\n    CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {\n      var pipeMeta = this._pipeCache.get(pipeType);\n\n      if (!pipeMeta) {\n        this._reportError(util_2.syntaxError(\"Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n      }\n\n      return pipeMeta || null;\n    };\n\n    CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {\n      var pipeSummary = this._loadSummary(pipeType, cpl.CompileSummaryKind.Pipe);\n\n      if (!pipeSummary) {\n        this._reportError(util_2.syntaxError(\"Illegal state: Could not load the summary for pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n      }\n\n      return pipeSummary;\n    };\n\n    CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {\n      var pipeMeta = this._pipeCache.get(pipeType);\n\n      if (!pipeMeta) {\n        pipeMeta = this._loadPipeMetadata(pipeType);\n      }\n\n      return pipeMeta;\n    };\n\n    CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {\n      pipeType = util_2.resolveForwardRef(pipeType);\n\n      var pipeAnnotation = this._pipeResolver.resolve(pipeType);\n\n      var pipeMeta = new cpl.CompilePipeMetadata({\n        type: this._getTypeMetadata(pipeType),\n        name: pipeAnnotation.name,\n        pure: !!pipeAnnotation.pure\n      });\n\n      this._pipeCache.set(pipeType, pipeMeta);\n\n      this._summaryCache.set(pipeType, pipeMeta.toSummary());\n\n      return pipeMeta;\n    };\n\n    CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies, throwOnUnknownDeps) {\n      var _this = this;\n\n      if (throwOnUnknownDeps === void 0) {\n        throwOnUnknownDeps = true;\n      }\n\n      var hasUnknownDeps = false;\n      var params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n      var dependenciesMetadata = params.map(function (param) {\n        var isAttribute = false;\n        var isHost = false;\n        var isSelf = false;\n        var isSkipSelf = false;\n        var isOptional = false;\n        var token = null;\n\n        if (Array.isArray(param)) {\n          param.forEach(function (paramEntry) {\n            if (core_1.createHost.isTypeOf(paramEntry)) {\n              isHost = true;\n            } else if (core_1.createSelf.isTypeOf(paramEntry)) {\n              isSelf = true;\n            } else if (core_1.createSkipSelf.isTypeOf(paramEntry)) {\n              isSkipSelf = true;\n            } else if (core_1.createOptional.isTypeOf(paramEntry)) {\n              isOptional = true;\n            } else if (core_1.createAttribute.isTypeOf(paramEntry)) {\n              isAttribute = true;\n              token = paramEntry.attributeName;\n            } else if (core_1.createInject.isTypeOf(paramEntry)) {\n              token = paramEntry.token;\n            } else if (core_1.createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof static_symbol_1.StaticSymbol) {\n              token = paramEntry;\n            } else if (isValidType(paramEntry) && token == null) {\n              token = paramEntry;\n            }\n          });\n        } else {\n          token = param;\n        }\n\n        if (token == null) {\n          hasUnknownDeps = true;\n          return {};\n        }\n\n        return {\n          isAttribute: isAttribute,\n          isHost: isHost,\n          isSelf: isSelf,\n          isSkipSelf: isSkipSelf,\n          isOptional: isOptional,\n          token: _this._getTokenMetadata(token)\n        };\n      });\n\n      if (hasUnknownDeps) {\n        var depsTokens = dependenciesMetadata.map(function (dep) {\n          return dep.token ? stringifyType(dep.token) : '?';\n        }).join(', ');\n        var message = \"Can't resolve all parameters for \" + stringifyType(typeOrFunc) + \": (\" + depsTokens + \").\";\n\n        if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\n          this._reportError(util_2.syntaxError(message), typeOrFunc);\n        }\n      }\n\n      return dependenciesMetadata;\n    };\n\n    CompileMetadataResolver.prototype._getTokenMetadata = function (token) {\n      token = util_2.resolveForwardRef(token);\n      var compileToken;\n\n      if (typeof token === 'string') {\n        compileToken = {\n          value: token\n        };\n      } else {\n        compileToken = {\n          identifier: {\n            reference: token\n          }\n        };\n      }\n\n      return compileToken;\n    };\n\n    CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {\n      var _this = this;\n\n      if (compileProviders === void 0) {\n        compileProviders = [];\n      }\n\n      providers.forEach(function (provider, providerIdx) {\n        if (Array.isArray(provider)) {\n          _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n        } else {\n          provider = util_2.resolveForwardRef(provider);\n          var providerMeta = undefined;\n\n          if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n            _this._validateProvider(provider);\n\n            providerMeta = new cpl.ProviderMeta(provider.provide, provider);\n          } else if (isValidType(provider)) {\n            providerMeta = new cpl.ProviderMeta(provider, {\n              useClass: provider\n            });\n          } else if (provider === void 0) {\n            _this._reportError(util_2.syntaxError(\"Encountered undefined provider! Usually this means you have a circular dependencies. This might be caused by using 'barrel' index.ts files.\"));\n\n            return;\n          } else {\n            var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {\n              if (seenProviderIdx < providerIdx) {\n                soFar.push(\"\" + stringifyType(seenProvider));\n              } else if (seenProviderIdx == providerIdx) {\n                soFar.push(\"?\" + stringifyType(seenProvider) + \"?\");\n              } else if (seenProviderIdx == providerIdx + 1) {\n                soFar.push('...');\n              }\n\n              return soFar;\n            }, []).join(', ');\n\n            _this._reportError(util_2.syntaxError(\"Invalid \" + (debugInfo ? debugInfo : 'provider') + \" - only instances of Provider and Type are allowed, got: [\" + providersInfo + \"]\"), type);\n\n            return;\n          }\n\n          if (providerMeta.token === _this._reflector.resolveExternalReference(identifiers_1.Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n            targetEntryComponents.push.apply(targetEntryComponents, tslib_1.__spreadArray([], tslib_1.__read(_this._getEntryComponentsFromProvider(providerMeta, type))));\n          } else {\n            compileProviders.push(_this.getProviderMetadata(providerMeta));\n          }\n        }\n      });\n      return compileProviders;\n    };\n\n    CompileMetadataResolver.prototype._validateProvider = function (provider) {\n      if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n        this._reportError(util_2.syntaxError(\"Invalid provider for \" + stringifyType(provider.provide) + \". useClass cannot be \" + provider.useClass + \".\\n           Usually it happens when:\\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\\n           2. Class was used before it was declared. Use forwardRef in this case.\"));\n      }\n    };\n\n    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {\n      var _this = this;\n\n      var components = [];\n      var collectedIdentifiers = [];\n\n      if (provider.useFactory || provider.useExisting || provider.useClass) {\n        this._reportError(util_2.syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!\"), type);\n\n        return [];\n      }\n\n      if (!provider.multi) {\n        this._reportError(util_2.syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!\"), type);\n\n        return [];\n      }\n\n      extractIdentifiers(provider.useValue, collectedIdentifiers);\n      collectedIdentifiers.forEach(function (identifier) {\n        var entry = _this._getEntryComponentMetadata(identifier.reference, false);\n\n        if (entry) {\n          components.push(entry);\n        }\n      });\n      return components;\n    };\n\n    CompileMetadataResolver.prototype._getEntryComponentMetadata = function (dirType, throwIfNotFound) {\n      if (throwIfNotFound === void 0) {\n        throwIfNotFound = true;\n      }\n\n      var dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n\n      if (dirMeta && dirMeta.metadata.isComponent) {\n        return {\n          componentType: dirType,\n          componentFactory: dirMeta.metadata.componentFactory\n        };\n      }\n\n      var dirSummary = this._loadSummary(dirType, cpl.CompileSummaryKind.Directive);\n\n      if (dirSummary && dirSummary.isComponent) {\n        return {\n          componentType: dirType,\n          componentFactory: dirSummary.componentFactory\n        };\n      }\n\n      if (throwIfNotFound) {\n        throw util_2.syntaxError(dirType.name + \" cannot be used as an entry component.\");\n      }\n\n      return null;\n    };\n\n    CompileMetadataResolver.prototype._getInjectableTypeMetadata = function (type, dependencies) {\n      if (dependencies === void 0) {\n        dependencies = null;\n      }\n\n      var typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n\n      if (typeSummary) {\n        return typeSummary.type;\n      }\n\n      return this._getTypeMetadata(type, dependencies);\n    };\n\n    CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {\n      var compileDeps = undefined;\n      var compileTypeMetadata = null;\n      var compileFactoryMetadata = null;\n\n      var token = this._getTokenMetadata(provider.token);\n\n      if (provider.useClass) {\n        compileTypeMetadata = this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);\n        compileDeps = compileTypeMetadata.diDeps;\n\n        if (provider.token === provider.useClass) {\n          // use the compileTypeMetadata as it contains information about lifecycleHooks...\n          token = {\n            identifier: compileTypeMetadata\n          };\n        }\n      } else if (provider.useFactory) {\n        compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n        compileDeps = compileFactoryMetadata.diDeps;\n      }\n\n      return {\n        token: token,\n        useClass: compileTypeMetadata,\n        useValue: provider.useValue,\n        useFactory: compileFactoryMetadata,\n        useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\n        deps: compileDeps,\n        multi: provider.multi\n      };\n    };\n\n    CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {\n      var _this = this;\n\n      var res = [];\n      Object.keys(queries).forEach(function (propertyName) {\n        var query = queries[propertyName];\n\n        if (query.isViewQuery === isViewQuery) {\n          res.push(_this._getQueryMetadata(query, propertyName, directiveType));\n        }\n      });\n      return res;\n    };\n\n    CompileMetadataResolver.prototype._queryVarBindings = function (selector) {\n      return selector.split(/\\s*,\\s*/);\n    };\n\n    CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {\n      var _this = this;\n\n      var selectors;\n\n      if (typeof q.selector === 'string') {\n        selectors = this._queryVarBindings(q.selector).map(function (varName) {\n          return _this._getTokenMetadata(varName);\n        });\n      } else {\n        if (!q.selector) {\n          this._reportError(util_2.syntaxError(\"Can't construct a query for the property \\\"\" + propertyName + \"\\\" of \\\"\" + stringifyType(typeOrFunc) + \"\\\" since the query selector wasn't defined.\"), typeOrFunc);\n\n          selectors = [];\n        } else {\n          selectors = [this._getTokenMetadata(q.selector)];\n        }\n      }\n\n      return {\n        selectors: selectors,\n        first: q.first,\n        descendants: q.descendants,\n        emitDistinctChangesOnly: q.emitDistinctChangesOnly,\n        propertyName: propertyName,\n        read: q.read ? this._getTokenMetadata(q.read) : null,\n        static: q.static\n      };\n    };\n\n    CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {\n      if (this._errorCollector) {\n        this._errorCollector(error, type);\n\n        if (otherType) {\n          this._errorCollector(error, otherType);\n        }\n      } else {\n        throw error;\n      }\n    };\n\n    return CompileMetadataResolver;\n  }();\n\n  exports.CompileMetadataResolver = CompileMetadataResolver;\n\n  function flattenArray(tree, out) {\n    if (out === void 0) {\n      out = [];\n    }\n\n    if (tree) {\n      for (var i = 0; i < tree.length; i++) {\n        var item = util_2.resolveForwardRef(tree[i]);\n\n        if (Array.isArray(item)) {\n          flattenArray(item, out);\n        } else {\n          out.push(item);\n        }\n      }\n    }\n\n    return out;\n  }\n\n  function dedupeArray(array) {\n    if (array) {\n      return Array.from(new Set(array));\n    }\n\n    return [];\n  }\n\n  function flattenAndDedupeArray(tree) {\n    return dedupeArray(flattenArray(tree));\n  }\n\n  function isValidType(value) {\n    return value instanceof static_symbol_1.StaticSymbol || value instanceof core_1.Type;\n  }\n\n  function extractIdentifiers(value, targetIdentifiers) {\n    util_2.visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n  }\n\n  var _CompileValueConverter =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(_CompileValueConverter, _super);\n\n    function _CompileValueConverter() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {\n      targetIdentifiers.push({\n        reference: value\n      });\n    };\n\n    return _CompileValueConverter;\n  }(util_2.ValueTransformer);\n\n  function stringifyType(type) {\n    if (type instanceof static_symbol_1.StaticSymbol) {\n      return type.name + \" in \" + type.filePath;\n    } else {\n      return util_2.stringify(type);\n    }\n  }\n  /**\n   * Indicates that a component is still being loaded in a synchronous compile.\n   */\n\n\n  function componentStillLoadingError(compType) {\n    var error = Error(\"Can't compile synchronously as \" + util_2.stringify(compType) + \" is still being loaded!\");\n    error[exports.ERROR_COMPONENT_TYPE] = compType;\n    return error;\n  }\n}); //# sourceMappingURL=data:application/json;base64,","map":{"version":3,"sources":["D:/Animal/Awesome-Animals/node_modules/@angular/compiler/src/metadata_resolver.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","CompileMetadataResolver","getMissingNgModuleMetadataErrorData","ERROR_COMPONENT_TYPE","tslib_1","static_symbol_1","util_1","assertions_1","cpl","core_1","directive_resolver_1","identifiers_1","lifecycle_reflector_1","selector_1","util_2","MISSING_NG_MODULE_METADATA_ERROR_DATA","error","_a","_config","_htmlParser","_ngModuleResolver","_directiveResolver","_pipeResolver","_summaryResolver","_schemaRegistry","_directiveNormalizer","_console","_staticSymbolCache","_reflector","_errorCollector","_nonNormalizedDirectiveCache","Map","_directiveCache","_summaryCache","_pipeCache","_ngModuleCache","_ngModuleOfTypes","_shallowModuleCache","prototype","getReflector","clearCacheFor","type","dirMeta","get","delete","clear","clearCache","_createProxyClass","baseType","name","delegate","proxyClass","Error","stringify","apply","arguments","setDelegate","d","overriddenName","getGeneratedClass","dirType","StaticSymbol","ngfactoryFilePath","filePath","getComponentViewClass","viewClassName","getHostComponentViewClass","hostViewClassName","getHostComponentType","identifierName","reference","getRendererType","rendererTypeName","getComponentFactory","selector","inputs","outputs","componentFactoryName","hostView","createComponentFactory","resolveExternalReference","Identifiers","initComponentFactory","ngContentSelectors","push","__spreadArray","__read","_loadSummary","kind","typeSummary","summary","resolveSummary","set","summaryKind","getHostComponentMetadata","compMeta","hostViewType","hostType","template","CssSelector","parse","getMatchingElementTemplate","templateUrl","htmlAst","CompileDirectiveMetadata","create","isHost","diDeps","lifecycleHooks","CompileTemplateMetadata","encapsulation","ViewEncapsulation","None","styles","styleUrls","animations","isInline","externalStylesheets","interpolation","preserveWhitespaces","exportAs","changeDetection","ChangeDetectionStrategy","Default","host","isComponent","providers","viewProviders","queries","guards","viewQueries","componentViewType","rendererType","id","data","entryComponents","componentFactory","loadDirectiveMetadata","ngModuleType","directiveType","isSync","_this","has","resolveForwardRef","getNonNormalizedDirectiveMetadata","annotation","metadata","createDirectiveMetadata","templateMetadata","normalizedDirMeta","hostListeners","hostProperties","hostAttributes","toSummary","templateMeta","normalizeTemplate","componentType","moduleUrl","componentModuleUrl","isPromise","_reportError","componentStillLoadingError","SyncAsync","then","cacheEntry","resolve","nonNormalizedTemplateMetadata","createComponent","isTypeOf","assertArrayOfStrings","assertInterpolationSymbols","noUndefined","changeDetectionStrategy","entryComponentMetadata","_getProvidersMetadata","stringifyType","flattenAndDedupeArray","map","_getEntryComponentMetadata","concat","getDefaultComponentElementName","_getQueriesMetadata","_getTypeMetadata","getDirectiveMetadata","syntaxError","getDirectiveSummary","dirSummary","CompileSummaryKind","Directive","isDirective","isAbstractDirective","meta","isPipe","Pipe","isNgModule","NgModule","getNgModuleSummary","moduleType","alreadyCollecting","moduleSummary","moduleMeta","getNgModuleMetadata","loadNgModuleDirectiveAndPipeMetadata","throwIfNotFound","ngModule","loading","declaredDirectives","forEach","promise","declaredPipes","_loadPipeMetadata","Promise","all","getShallowModuleMetadata","compileMeta","ngModuleMeta","findLast","shallowAnnotations","createNgModule","rawExports","rawImports","imports","rawProviders","exportedNonModuleIdentifiers","importedModules","exportedModules","bootstrapComponents","schemas","importedType","importedModuleType","isValidType","moduleWithProviders","_checkSelfImport","Set","_getTypeDescriptor","add","importedModuleSummary","err","fileName","className","exportedType","exportedModuleSummary","_getIdentifierMetadata","transitiveModule","_getTransitiveNgModuleMetadata","declarations","declaredType","declaredIdentifier","addDirective","_addTypeToModule","addPipe","pipes","exportedDirectives","exportedPipes","exportedId","directivesSet","addExportedDirective","pipesSet","addExportedPipe","bootstrap","CompileNgModuleMetadata","addEntryComponent","provider","addProvider","addModule","provide","oldModule","result","TransitiveCompileNgModuleMetadata","modulesByToken","modSummary","modules","mod","comp","addedTokens","entry","tokenRef","tokenReference","token","prevModules","moduleRef","isInjectable","annotations","tryAnnotations","some","ann","createInjectable","getInjectableSummary","Injectable","getInjectableMetadata","dependencies","throwOnUnknownDeps","typeMetadata","filter","length","symbol","providedIn","useValue","useClass","useExisting","useFactory","deps","identifier","_getDependenciesMetadata","getAllLifecycleHooks","_getFactoryMetadata","getPipeMetadata","pipeType","pipeMeta","getPipeSummary","pipeSummary","getOrLoadPipeMetadata","pipeAnnotation","CompilePipeMetadata","pure","typeOrFunc","hasUnknownDeps","params","parameters","dependenciesMetadata","param","isAttribute","isSelf","isSkipSelf","isOptional","Array","isArray","paramEntry","createHost","createSelf","createSkipSelf","createOptional","createAttribute","attributeName","createInject","createInjectionToken","_getTokenMetadata","depsTokens","dep","join","message","strictInjectionParameters","compileToken","targetEntryComponents","debugInfo","compileProviders","providerIdx","providerMeta","hasOwnProperty","_validateProvider","ProviderMeta","providersInfo","reduce","soFar","seenProvider","seenProviderIdx","ANALYZE_FOR_ENTRY_COMPONENTS","_getEntryComponentsFromProvider","getProviderMetadata","components","collectedIdentifiers","multi","extractIdentifiers","_getInjectableTypeMetadata","compileDeps","compileTypeMetadata","compileFactoryMetadata","isViewQuery","res","keys","propertyName","query","_getQueryMetadata","_queryVarBindings","split","q","selectors","varName","first","descendants","emitDistinctChangesOnly","read","static","otherType","flattenArray","tree","out","i","item","dedupeArray","array","from","Type","targetIdentifiers","visitValue","_CompileValueConverter","_super","__extends","visitOther","ValueTransformer","compType"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,UAAUA,OAAV,EAAmB;AAChB,MAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAA5D,EAAsE;AAClE,QAAIC,CAAC,GAAGH,OAAO,CAACI,OAAD,EAAUF,OAAV,CAAf;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqBJ,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACxB,GAHD,MAIK,IAAI,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACjDD,IAAAA,MAAM,CAAC,yCAAD,EAA4C,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,yCAAhC,EAA2E,gCAA3E,EAA6G,kCAA7G,EAAiJ,wCAAjJ,EAA2L,4BAA3L,EAAyN,0CAAzN,EAAqQ,mCAArQ,EAA0S,2CAA1S,EAAuV,gCAAvV,EAAyX,4BAAzX,CAA5C,EAAocN,OAApc,CAAN;AACH;AACJ,CARD,EAQG,UAAUI,OAAV,EAAmBF,OAAnB,EAA4B;AAC3B;;AACAM,EAAAA,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,YAA/B,EAA6C;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAA7C;AACAR,EAAAA,OAAO,CAACS,uBAAR,GAAkCT,OAAO,CAACU,mCAAR,GAA8CV,OAAO,CAACW,oBAAR,GAA+B,KAAK,CAApH;;AACA,MAAIC,OAAO,GAAGV,OAAO,CAAC,OAAD,CAArB;;AACA,MAAIW,eAAe,GAAGX,OAAO,CAAC,yCAAD,CAA7B;;AACA,MAAIY,MAAM,GAAGZ,OAAO,CAAC,gCAAD,CAApB;;AACA,MAAIa,YAAY,GAAGb,OAAO,CAAC,kCAAD,CAA1B;;AACA,MAAIc,GAAG,GAAGd,OAAO,CAAC,wCAAD,CAAjB;;AACA,MAAIe,MAAM,GAAGf,OAAO,CAAC,4BAAD,CAApB;;AACA,MAAIgB,oBAAoB,GAAGhB,OAAO,CAAC,0CAAD,CAAlC;;AACA,MAAIiB,aAAa,GAAGjB,OAAO,CAAC,mCAAD,CAA3B;;AACA,MAAIkB,qBAAqB,GAAGlB,OAAO,CAAC,2CAAD,CAAnC;;AACA,MAAImB,UAAU,GAAGnB,OAAO,CAAC,gCAAD,CAAxB;;AACA,MAAIoB,MAAM,GAAGpB,OAAO,CAAC,4BAAD,CAApB;;AACAF,EAAAA,OAAO,CAACW,oBAAR,GAA+B,iBAA/B;AACA,MAAIY,qCAAqC,GAAG,oCAA5C;;AACA,WAASb,mCAAT,CAA6Cc,KAA7C,EAAoD;AAChD,QAAIC,EAAJ;;AACA,WAAO,CAACA,EAAE,GAAGD,KAAK,CAACD,qCAAD,CAAX,MAAwD,IAAxD,IAAgEE,EAAE,KAAK,KAAK,CAA5E,GAAgFA,EAAhF,GAAqF,IAA5F;AACH;;AACDzB,EAAAA,OAAO,CAACU,mCAAR,GAA8CA,mCAA9C,CArB2B,CAsB3B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAID,uBAAuB;AAAG;AAAe,cAAY;AACrD,aAASA,uBAAT,CAAiCiB,OAAjC,EAA0CC,WAA1C,EAAuDC,iBAAvD,EAA0EC,kBAA1E,EAA8FC,aAA9F,EAA6GC,gBAA7G,EAA+HC,eAA/H,EAAgJC,oBAAhJ,EAAsKC,QAAtK,EAAgLC,kBAAhL,EAAoMC,UAApM,EAAgNC,eAAhN,EAAiO;AAC7N,WAAKX,OAAL,GAAeA,OAAf;AACA,WAAKC,WAAL,GAAmBA,WAAnB;AACA,WAAKC,iBAAL,GAAyBA,iBAAzB;AACA,WAAKC,kBAAL,GAA0BA,kBAA1B;AACA,WAAKC,aAAL,GAAqBA,aAArB;AACA,WAAKC,gBAAL,GAAwBA,gBAAxB;AACA,WAAKC,eAAL,GAAuBA,eAAvB;AACA,WAAKC,oBAAL,GAA4BA,oBAA5B;AACA,WAAKC,QAAL,GAAgBA,QAAhB;AACA,WAAKC,kBAAL,GAA0BA,kBAA1B;AACA,WAAKC,UAAL,GAAkBA,UAAlB;AACA,WAAKC,eAAL,GAAuBA,eAAvB;AACA,WAAKC,4BAAL,GAAoC,IAAIC,GAAJ,EAApC;AACA,WAAKC,eAAL,GAAuB,IAAID,GAAJ,EAAvB;AACA,WAAKE,aAAL,GAAqB,IAAIF,GAAJ,EAArB;AACA,WAAKG,UAAL,GAAkB,IAAIH,GAAJ,EAAlB;AACA,WAAKI,cAAL,GAAsB,IAAIJ,GAAJ,EAAtB;AACA,WAAKK,gBAAL,GAAwB,IAAIL,GAAJ,EAAxB;AACA,WAAKM,mBAAL,GAA2B,IAAIN,GAAJ,EAA3B;AACH;;AACD9B,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCC,YAAlC,GAAiD,YAAY;AACzD,aAAO,KAAKX,UAAZ;AACH,KAFD;;AAGA3B,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCE,aAAlC,GAAkD,UAAUC,IAAV,EAAgB;AAC9D,UAAIC,OAAO,GAAG,KAAKV,eAAL,CAAqBW,GAArB,CAAyBF,IAAzB,CAAd;;AACA,WAAKT,eAAL,CAAqBY,MAArB,CAA4BH,IAA5B;;AACA,WAAKX,4BAAL,CAAkCc,MAAlC,CAAyCH,IAAzC;;AACA,WAAKR,aAAL,CAAmBW,MAAnB,CAA0BH,IAA1B;;AACA,WAAKP,UAAL,CAAgBU,MAAhB,CAAuBH,IAAvB;;AACA,WAAKL,gBAAL,CAAsBQ,MAAtB,CAA6BH,IAA7B,EAN8D,CAO9D;;;AACA,WAAKN,cAAL,CAAoBU,KAApB;;AACA,UAAIH,OAAJ,EAAa;AACT,aAAKjB,oBAAL,CAA0Be,aAA1B,CAAwCE,OAAxC;AACH;AACJ,KAZD;;AAaAzC,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCQ,UAAlC,GAA+C,YAAY;AACvD,WAAKd,eAAL,CAAqBa,KAArB;;AACA,WAAKf,4BAAL,CAAkCe,KAAlC;;AACA,WAAKZ,aAAL,CAAmBY,KAAnB;;AACA,WAAKX,UAAL,CAAgBW,KAAhB;;AACA,WAAKV,cAAL,CAAoBU,KAApB;;AACA,WAAKT,gBAAL,CAAsBS,KAAtB;;AACA,WAAKpB,oBAAL,CAA0BqB,UAA1B;AACH,KARD;;AASA7C,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCS,iBAAlC,GAAsD,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;AAC5E,UAAIC,QAAQ,GAAG,IAAf;;AACA,UAAIC,UAAU,GAAG,YAAY;AACzB,YAAI,CAACD,QAAL,EAAe;AACX,gBAAM,IAAIE,KAAJ,CAAU,0BAA0BH,IAA1B,GAAiC,YAAjC,GAAgDnC,MAAM,CAACuC,SAAP,CAAiBL,QAAjB,CAAhD,GAA6E,uBAAvF,CAAN;AACH;;AACD,eAAOE,QAAQ,CAACI,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACH,OALD;;AAMAJ,MAAAA,UAAU,CAACK,WAAX,GAAyB,UAAUC,CAAV,EAAa;AAClCP,QAAAA,QAAQ,GAAGO,CAAX;AACAN,QAAAA,UAAU,CAACb,SAAX,GAAuBmB,CAAC,CAACnB,SAAzB;AACH,OAHD,CAR4E,CAY5E;;;AACAa,MAAAA,UAAU,CAACO,cAAX,GAA4BT,IAA5B;AACA,aAAOE,UAAP;AACH,KAfD;;AAgBAlD,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCqB,iBAAlC,GAAsD,UAAUC,OAAV,EAAmBX,IAAnB,EAAyB;AAC3E,UAAIW,OAAO,YAAYvD,eAAe,CAACwD,YAAvC,EAAqD;AACjD,eAAO,KAAKlC,kBAAL,CAAwBgB,GAAxB,CAA4BrC,MAAM,CAACwD,iBAAP,CAAyBF,OAAO,CAACG,QAAjC,CAA5B,EAAwEd,IAAxE,CAAP;AACH,OAFD,MAGK;AACD,eAAO,KAAKF,iBAAL,CAAuBa,OAAvB,EAAgCX,IAAhC,CAAP;AACH;AACJ,KAPD;;AAQAhD,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC0B,qBAAlC,GAA0D,UAAUJ,OAAV,EAAmB;AACzE,aAAO,KAAKD,iBAAL,CAAuBC,OAAvB,EAAgCpD,GAAG,CAACyD,aAAJ,CAAkBL,OAAlB,EAA2B,CAA3B,CAAhC,CAAP;AACH,KAFD;;AAGA3D,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC4B,yBAAlC,GAA8D,UAAUN,OAAV,EAAmB;AAC7E,aAAO,KAAKD,iBAAL,CAAuBC,OAAvB,EAAgCpD,GAAG,CAAC2D,iBAAJ,CAAsBP,OAAtB,CAAhC,CAAP;AACH,KAFD;;AAGA3D,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC8B,oBAAlC,GAAyD,UAAUR,OAAV,EAAmB;AACxE,UAAIX,IAAI,GAAGzC,GAAG,CAAC6D,cAAJ,CAAmB;AAAEC,QAAAA,SAAS,EAAEV;AAAb,OAAnB,IAA6C,OAAxD;;AACA,UAAIA,OAAO,YAAYvD,eAAe,CAACwD,YAAvC,EAAqD;AACjD,eAAO,KAAKlC,kBAAL,CAAwBgB,GAAxB,CAA4BiB,OAAO,CAACG,QAApC,EAA8Cd,IAA9C,CAAP;AACH;;AACD,aAAO,KAAKF,iBAAL,CAAuBa,OAAvB,EAAgCX,IAAhC,CAAP;AACH,KAND;;AAOAhD,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCiC,eAAlC,GAAoD,UAAUX,OAAV,EAAmB;AACnE,UAAIA,OAAO,YAAYvD,eAAe,CAACwD,YAAvC,EAAqD;AACjD,eAAO,KAAKlC,kBAAL,CAAwBgB,GAAxB,CAA4BrC,MAAM,CAACwD,iBAAP,CAAyBF,OAAO,CAACG,QAAjC,CAA5B,EAAwEvD,GAAG,CAACgE,gBAAJ,CAAqBZ,OAArB,CAAxE,CAAP;AACH,OAFD,MAGK;AACD;AACA;AACA,eAAO,EAAP;AACH;AACJ,KATD;;AAUA3D,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCmC,mBAAlC,GAAwD,UAAUC,QAAV,EAAoBd,OAApB,EAA6Be,MAA7B,EAAqCC,OAArC,EAA8C;AAClG,UAAIhB,OAAO,YAAYvD,eAAe,CAACwD,YAAvC,EAAqD;AACjD,eAAO,KAAKlC,kBAAL,CAAwBgB,GAAxB,CAA4BrC,MAAM,CAACwD,iBAAP,CAAyBF,OAAO,CAACG,QAAjC,CAA5B,EAAwEvD,GAAG,CAACqE,oBAAJ,CAAyBjB,OAAzB,CAAxE,CAAP;AACH,OAFD,MAGK;AACD,YAAIkB,QAAQ,GAAG,KAAKZ,yBAAL,CAA+BN,OAA/B,CAAf,CADC,CAED;AACA;;AACA,YAAImB,sBAAsB,GAAG,KAAKnD,UAAL,CAAgBoD,wBAAhB,CAAyCrE,aAAa,CAACsE,WAAd,CAA0BF,sBAAnE,CAA7B;;AACA,eAAOA,sBAAsB,CAACL,QAAD,EAAWd,OAAX,EAAoBkB,QAApB,EAA8BH,MAA9B,EAAsCC,OAAtC,EAA+C,EAA/C,CAA7B;AACH;AACJ,KAXD;;AAYA3E,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC4C,oBAAlC,GAAyD,UAAU5F,OAAV,EAAmB6F,kBAAnB,EAAuC;AAC5F,UAAIlE,EAAJ;;AACA,UAAI,EAAE3B,OAAO,YAAYe,eAAe,CAACwD,YAArC,CAAJ,EAAwD;AACpD,SAAC5C,EAAE,GAAG3B,OAAO,CAAC6F,kBAAd,EAAkCC,IAAlC,CAAuC9B,KAAvC,CAA6CrC,EAA7C,EAAiDb,OAAO,CAACiF,aAAR,CAAsB,EAAtB,EAA0BjF,OAAO,CAACkF,MAAR,CAAeH,kBAAf,CAA1B,CAAjD;AACH;AACJ,KALD;;AAMAlF,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCiD,YAAlC,GAAiD,UAAU9C,IAAV,EAAgB+C,IAAhB,EAAsB;AACnE,UAAIC,WAAW,GAAG,KAAKxD,aAAL,CAAmBU,GAAnB,CAAuBF,IAAvB,CAAlB;;AACA,UAAI,CAACgD,WAAL,EAAkB;AACd,YAAIC,OAAO,GAAG,KAAKnE,gBAAL,CAAsBoE,cAAtB,CAAqClD,IAArC,CAAd;;AACAgD,QAAAA,WAAW,GAAGC,OAAO,GAAGA,OAAO,CAACjD,IAAX,GAAkB,IAAvC;;AACA,aAAKR,aAAL,CAAmB2D,GAAnB,CAAuBnD,IAAvB,EAA6BgD,WAAW,IAAI,IAA5C;AACH;;AACD,aAAOA,WAAW,IAAIA,WAAW,CAACI,WAAZ,KAA4BL,IAA3C,GAAkDC,WAAlD,GAAgE,IAAvE;AACH,KARD;;AASAxF,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCwD,wBAAlC,GAA6D,UAAUC,QAAV,EAAoBC,YAApB,EAAkC;AAC3F,UAAIC,QAAQ,GAAG,KAAK7B,oBAAL,CAA0B2B,QAAQ,CAACtD,IAAT,CAAc6B,SAAxC,CAAf;;AACA,UAAI,CAAC0B,YAAL,EAAmB;AACfA,QAAAA,YAAY,GAAG,KAAK9B,yBAAL,CAA+B+B,QAA/B,CAAf;AACH,OAJ0F,CAK3F;AACA;;;AACA,UAAIC,QAAQ,GAAGrF,UAAU,CAACsF,WAAX,CAAuBC,KAAvB,CAA6BL,QAAQ,CAACrB,QAAtC,EAAgD,CAAhD,EAAmD2B,0BAAnD,EAAf;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,UAAIC,OAAO,GAAG,KAAKpF,WAAL,CAAiBiF,KAAjB,CAAuBF,QAAvB,EAAiCI,WAAjC,CAAd;;AACA,aAAO9F,GAAG,CAACgG,wBAAJ,CAA6BC,MAA7B,CAAoC;AACvCC,QAAAA,MAAM,EAAE,IAD+B;AAEvCjE,QAAAA,IAAI,EAAE;AAAE6B,UAAAA,SAAS,EAAE2B,QAAb;AAAuBU,UAAAA,MAAM,EAAE,EAA/B;AAAmCC,UAAAA,cAAc,EAAE;AAAnD,SAFiC;AAGvCV,QAAAA,QAAQ,EAAE,IAAI1F,GAAG,CAACqG,uBAAR,CAAgC;AACtCC,UAAAA,aAAa,EAAErG,MAAM,CAACsG,iBAAP,CAAyBC,IADF;AAEtCd,UAAAA,QAAQ,EAAEA,QAF4B;AAGtCI,UAAAA,WAAW,EAAEA,WAHyB;AAItCC,UAAAA,OAAO,EAAEA,OAJ6B;AAKtCU,UAAAA,MAAM,EAAE,EAL8B;AAMtCC,UAAAA,SAAS,EAAE,EAN2B;AAOtC/B,UAAAA,kBAAkB,EAAE,EAPkB;AAQtCgC,UAAAA,UAAU,EAAE,EAR0B;AAStCC,UAAAA,QAAQ,EAAE,IAT4B;AAUtCC,UAAAA,mBAAmB,EAAE,EAViB;AAWtCC,UAAAA,aAAa,EAAE,IAXuB;AAYtCC,UAAAA,mBAAmB,EAAE;AAZiB,SAAhC,CAH6B;AAiBvCC,QAAAA,QAAQ,EAAE,IAjB6B;AAkBvCC,QAAAA,eAAe,EAAEhH,MAAM,CAACiH,uBAAP,CAA+BC,OAlBT;AAmBvChD,QAAAA,MAAM,EAAE,EAnB+B;AAoBvCC,QAAAA,OAAO,EAAE,EApB8B;AAqBvCgD,QAAAA,IAAI,EAAE,EArBiC;AAsBvCC,QAAAA,WAAW,EAAE,IAtB0B;AAuBvCnD,QAAAA,QAAQ,EAAE,GAvB6B;AAwBvCoD,QAAAA,SAAS,EAAE,EAxB4B;AAyBvCC,QAAAA,aAAa,EAAE,EAzBwB;AA0BvCC,QAAAA,OAAO,EAAE,EA1B8B;AA2BvCC,QAAAA,MAAM,EAAE,EA3B+B;AA4BvCC,QAAAA,WAAW,EAAE,EA5B0B;AA6BvCC,QAAAA,iBAAiB,EAAEnC,YA7BoB;AA8BvCoC,QAAAA,YAAY,EAAE;AAAEC,UAAAA,EAAE,EAAE,UAAN;AAAkBvB,UAAAA,aAAa,EAAErG,MAAM,CAACsG,iBAAP,CAAyBC,IAA1D;AAAgEC,UAAAA,MAAM,EAAE,EAAxE;AAA4EqB,UAAAA,IAAI,EAAE;AAAlF,SA9ByB;AA+BvCC,QAAAA,eAAe,EAAE,EA/BsB;AAgCvCC,QAAAA,gBAAgB,EAAE;AAhCqB,OAApC,CAAP;AAkCH,KA5CD;;AA6CAvI,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCmG,qBAAlC,GAA0D,UAAUC,YAAV,EAAwBC,aAAxB,EAAuCC,MAAvC,EAA+C;AACrG,UAAIC,KAAK,GAAG,IAAZ;;AACA,UAAI,KAAK7G,eAAL,CAAqB8G,GAArB,CAAyBH,aAAzB,CAAJ,EAA6C;AACzC,eAAO,IAAP;AACH;;AACDA,MAAAA,aAAa,GAAG7H,MAAM,CAACiI,iBAAP,CAAyBJ,aAAzB,CAAhB;;AACA,UAAI1H,EAAE,GAAG,KAAK+H,iCAAL,CAAuCL,aAAvC,CAAT;AAAA,UAAgEM,UAAU,GAAGhI,EAAE,CAACgI,UAAhF;AAAA,UAA4FC,QAAQ,GAAGjI,EAAE,CAACiI,QAA1G;;AACA,UAAIC,uBAAuB,GAAG,UAAUC,gBAAV,EAA4B;AACtD,YAAIC,iBAAiB,GAAG,IAAI7I,GAAG,CAACgG,wBAAR,CAAiC;AACrDE,UAAAA,MAAM,EAAE,KAD6C;AAErDjE,UAAAA,IAAI,EAAEyG,QAAQ,CAACzG,IAFsC;AAGrDoF,UAAAA,WAAW,EAAEqB,QAAQ,CAACrB,WAH+B;AAIrDnD,UAAAA,QAAQ,EAAEwE,QAAQ,CAACxE,QAJkC;AAKrD8C,UAAAA,QAAQ,EAAE0B,QAAQ,CAAC1B,QALkC;AAMrDC,UAAAA,eAAe,EAAEyB,QAAQ,CAACzB,eAN2B;AAOrD9C,UAAAA,MAAM,EAAEuE,QAAQ,CAACvE,MAPoC;AAQrDC,UAAAA,OAAO,EAAEsE,QAAQ,CAACtE,OARmC;AASrD0E,UAAAA,aAAa,EAAEJ,QAAQ,CAACI,aAT6B;AAUrDC,UAAAA,cAAc,EAAEL,QAAQ,CAACK,cAV4B;AAWrDC,UAAAA,cAAc,EAAEN,QAAQ,CAACM,cAX4B;AAYrD1B,UAAAA,SAAS,EAAEoB,QAAQ,CAACpB,SAZiC;AAarDC,UAAAA,aAAa,EAAEmB,QAAQ,CAACnB,aAb6B;AAcrDC,UAAAA,OAAO,EAAEkB,QAAQ,CAAClB,OAdmC;AAerDC,UAAAA,MAAM,EAAEiB,QAAQ,CAACjB,MAfoC;AAgBrDC,UAAAA,WAAW,EAAEgB,QAAQ,CAAChB,WAhB+B;AAiBrDK,UAAAA,eAAe,EAAEW,QAAQ,CAACX,eAjB2B;AAkBrDJ,UAAAA,iBAAiB,EAAEe,QAAQ,CAACf,iBAlByB;AAmBrDC,UAAAA,YAAY,EAAEc,QAAQ,CAACd,YAnB8B;AAoBrDI,UAAAA,gBAAgB,EAAEU,QAAQ,CAACV,gBApB0B;AAqBrDtC,UAAAA,QAAQ,EAAEkD;AArB2C,SAAjC,CAAxB;;AAuBA,YAAIA,gBAAJ,EAAsB;AAClBP,UAAAA,KAAK,CAAC3D,oBAAN,CAA2BgE,QAAQ,CAACV,gBAApC,EAAsDY,gBAAgB,CAACjE,kBAAvE;AACH;;AACD0D,QAAAA,KAAK,CAAC7G,eAAN,CAAsB4D,GAAtB,CAA0B+C,aAA1B,EAAyCU,iBAAzC;;AACAR,QAAAA,KAAK,CAAC5G,aAAN,CAAoB2D,GAApB,CAAwB+C,aAAxB,EAAuCU,iBAAiB,CAACI,SAAlB,EAAvC;;AACA,eAAO,IAAP;AACH,OA9BD;;AA+BA,UAAIP,QAAQ,CAACrB,WAAb,EAA0B;AACtB,YAAI3B,QAAQ,GAAGgD,QAAQ,CAAChD,QAAxB;;AACA,YAAIwD,YAAY,GAAG,KAAKjI,oBAAL,CAA0BkI,iBAA1B,CAA4C;AAC3DjB,UAAAA,YAAY,EAAEA,YAD6C;AAE3DkB,UAAAA,aAAa,EAAEjB,aAF4C;AAG3DkB,UAAAA,SAAS,EAAE,KAAKjI,UAAL,CAAgBkI,kBAAhB,CAAmCnB,aAAnC,EAAkDM,UAAlD,CAHgD;AAI3DnC,UAAAA,aAAa,EAAEZ,QAAQ,CAACY,aAJmC;AAK3DZ,UAAAA,QAAQ,EAAEA,QAAQ,CAACA,QALwC;AAM3DI,UAAAA,WAAW,EAAEJ,QAAQ,CAACI,WANqC;AAO3DW,UAAAA,MAAM,EAAEf,QAAQ,CAACe,MAP0C;AAQ3DC,UAAAA,SAAS,EAAEhB,QAAQ,CAACgB,SARuC;AAS3DC,UAAAA,UAAU,EAAEjB,QAAQ,CAACiB,UATsC;AAU3DG,UAAAA,aAAa,EAAEpB,QAAQ,CAACoB,aAVmC;AAW3DC,UAAAA,mBAAmB,EAAErB,QAAQ,CAACqB;AAX6B,SAA5C,CAAnB;;AAaA,YAAIzG,MAAM,CAACiJ,SAAP,CAAiBL,YAAjB,KAAkCd,MAAtC,EAA8C;AAC1C,eAAKoB,YAAL,CAAkBC,0BAA0B,CAACtB,aAAD,CAA5C,EAA6DA,aAA7D;;AACA,iBAAO,IAAP;AACH;;AACD,eAAO7H,MAAM,CAACoJ,SAAP,CAAiBC,IAAjB,CAAsBT,YAAtB,EAAoCP,uBAApC,CAAP;AACH,OApBD,MAqBK;AACD;AACAA,QAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACA,eAAO,IAAP;AACH;AACJ,KAhED;;AAiEAlJ,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC0G,iCAAlC,GAAsE,UAAUL,aAAV,EAAyB;AAC3F,UAAIE,KAAK,GAAG,IAAZ;;AACAF,MAAAA,aAAa,GAAG7H,MAAM,CAACiI,iBAAP,CAAyBJ,aAAzB,CAAhB;;AACA,UAAI,CAACA,aAAL,EAAoB;AAChB,eAAO,IAAP;AACH;;AACD,UAAIyB,UAAU,GAAG,KAAKtI,4BAAL,CAAkCa,GAAlC,CAAsCgG,aAAtC,CAAjB;;AACA,UAAIyB,UAAJ,EAAgB;AACZ,eAAOA,UAAP;AACH;;AACD,UAAI1H,OAAO,GAAG,KAAKrB,kBAAL,CAAwBgJ,OAAxB,CAAgC1B,aAAhC,EAA+C,KAA/C,CAAd;;AACA,UAAI,CAACjG,OAAL,EAAc;AACV,eAAO,IAAP;AACH;;AACD,UAAI4H,6BAA6B,GAAG3K,SAApC;;AACA,UAAIc,MAAM,CAAC8J,eAAP,CAAuBC,QAAvB,CAAgC9H,OAAhC,CAAJ,EAA8C;AAC1C;AACA,YAAIqD,QAAQ,GAAGrD,OAAf;AACAnC,QAAAA,YAAY,CAACkK,oBAAb,CAAkC,QAAlC,EAA4C1E,QAAQ,CAACkB,MAArD;AACA1G,QAAAA,YAAY,CAACkK,oBAAb,CAAkC,WAAlC,EAA+C1E,QAAQ,CAACmB,SAAxD;AACA3G,QAAAA,YAAY,CAACmK,0BAAb,CAAwC,eAAxC,EAAyD3E,QAAQ,CAACuB,aAAlE;AACA,YAAIH,UAAU,GAAGpB,QAAQ,CAACoB,UAA1B;AACAmD,QAAAA,6BAA6B,GAAG,IAAI9J,GAAG,CAACqG,uBAAR,CAAgC;AAC5DC,UAAAA,aAAa,EAAEhG,MAAM,CAAC6J,WAAP,CAAmB5E,QAAQ,CAACe,aAA5B,CAD6C;AAE5DZ,UAAAA,QAAQ,EAAEpF,MAAM,CAAC6J,WAAP,CAAmB5E,QAAQ,CAACG,QAA5B,CAFkD;AAG5DI,UAAAA,WAAW,EAAExF,MAAM,CAAC6J,WAAP,CAAmB5E,QAAQ,CAACO,WAA5B,CAH+C;AAI5DC,UAAAA,OAAO,EAAE,IAJmD;AAK5DU,UAAAA,MAAM,EAAElB,QAAQ,CAACkB,MAAT,IAAmB,EALiC;AAM5DC,UAAAA,SAAS,EAAEnB,QAAQ,CAACmB,SAAT,IAAsB,EAN2B;AAO5DC,UAAAA,UAAU,EAAEA,UAAU,IAAI,EAPkC;AAQ5DG,UAAAA,aAAa,EAAExG,MAAM,CAAC6J,WAAP,CAAmB5E,QAAQ,CAACuB,aAA5B,CAR6C;AAS5DF,UAAAA,QAAQ,EAAE,CAAC,CAACrB,QAAQ,CAACG,QATuC;AAU5DmB,UAAAA,mBAAmB,EAAE,EAVuC;AAW5DlC,UAAAA,kBAAkB,EAAE,EAXwC;AAY5DoC,UAAAA,mBAAmB,EAAEzG,MAAM,CAAC6J,WAAP,CAAmBjI,OAAO,CAAC6E,mBAA3B;AAZuC,SAAhC,CAAhC;AAcH;;AACD,UAAIqD,uBAAuB,GAAG,IAA9B;AACA,UAAI7C,aAAa,GAAG,EAApB;AACA,UAAI8C,sBAAsB,GAAG,EAA7B;AACA,UAAInG,QAAQ,GAAGhC,OAAO,CAACgC,QAAvB;;AACA,UAAIjE,MAAM,CAAC8J,eAAP,CAAuBC,QAAvB,CAAgC9H,OAAhC,CAAJ,EAA8C;AAC1C;AACA,YAAIqD,QAAQ,GAAGrD,OAAf;AACAkI,QAAAA,uBAAuB,GAAG7E,QAAQ,CAAC0B,eAAnC;;AACA,YAAI1B,QAAQ,CAACgC,aAAb,EAA4B;AACxBA,UAAAA,aAAa,GAAG,KAAK+C,qBAAL,CAA2B/E,QAAQ,CAACgC,aAApC,EAAmD8C,sBAAnD,EAA2E,yBAAyBE,aAAa,CAACpC,aAAD,CAAtC,GAAwD,IAAnI,EAAyI,EAAzI,EAA6IA,aAA7I,CAAhB;AACH;;AACD,YAAI5C,QAAQ,CAACwC,eAAb,EAA8B;AAC1BsC,UAAAA,sBAAsB,GAAGG,qBAAqB,CAACjF,QAAQ,CAACwC,eAAV,CAArB,CACpB0C,GADoB,CAChB,UAAUxI,IAAV,EAAgB;AAAE,mBAAOoG,KAAK,CAACqC,0BAAN,CAAiCzI,IAAjC,CAAP;AAAgD,WADlD,EAEpB0I,MAFoB,CAEbN,sBAFa,CAAzB;AAGH;;AACD,YAAI,CAACnG,QAAL,EAAe;AACXA,UAAAA,QAAQ,GAAG,KAAKlD,eAAL,CAAqB4J,8BAArB,EAAX;AACH;AACJ,OAfD,MAgBK;AACD;AACA,YAAI,CAAC1G,QAAL,EAAe;AACXA,UAAAA,QAAQ,GAAG,IAAX;AACH;AACJ;;AACD,UAAIoD,SAAS,GAAG,EAAhB;;AACA,UAAIpF,OAAO,CAACoF,SAAR,IAAqB,IAAzB,EAA+B;AAC3BA,QAAAA,SAAS,GAAG,KAAKgD,qBAAL,CAA2BpI,OAAO,CAACoF,SAAnC,EAA8C+C,sBAA9C,EAAsE,qBAAqBE,aAAa,CAACpC,aAAD,CAAlC,GAAoD,IAA1H,EAAgI,EAAhI,EAAoIA,aAApI,CAAZ;AACH;;AACD,UAAIX,OAAO,GAAG,EAAd;AACA,UAAIE,WAAW,GAAG,EAAlB;;AACA,UAAIxF,OAAO,CAACsF,OAAR,IAAmB,IAAvB,EAA6B;AACzBA,QAAAA,OAAO,GAAG,KAAKqD,mBAAL,CAAyB3I,OAAO,CAACsF,OAAjC,EAA0C,KAA1C,EAAiDW,aAAjD,CAAV;AACAT,QAAAA,WAAW,GAAG,KAAKmD,mBAAL,CAAyB3I,OAAO,CAACsF,OAAjC,EAA0C,IAA1C,EAAgDW,aAAhD,CAAd;AACH;;AACD,UAAIO,QAAQ,GAAG1I,GAAG,CAACgG,wBAAJ,CAA6BC,MAA7B,CAAoC;AAC/CC,QAAAA,MAAM,EAAE,KADuC;AAE/ChC,QAAAA,QAAQ,EAAEA,QAFqC;AAG/C8C,QAAAA,QAAQ,EAAE1G,MAAM,CAAC6J,WAAP,CAAmBjI,OAAO,CAAC8E,QAA3B,CAHqC;AAI/CK,QAAAA,WAAW,EAAE,CAAC,CAACyC,6BAJgC;AAK/C7H,QAAAA,IAAI,EAAE,KAAK6I,gBAAL,CAAsB3C,aAAtB,CALyC;AAM/CzC,QAAAA,QAAQ,EAAEoE,6BANqC;AAO/C7C,QAAAA,eAAe,EAAEmD,uBAP8B;AAQ/CjG,QAAAA,MAAM,EAAEjC,OAAO,CAACiC,MAAR,IAAkB,EARqB;AAS/CC,QAAAA,OAAO,EAAElC,OAAO,CAACkC,OAAR,IAAmB,EATmB;AAU/CgD,QAAAA,IAAI,EAAElF,OAAO,CAACkF,IAAR,IAAgB,EAVyB;AAW/CE,QAAAA,SAAS,EAAEA,SAAS,IAAI,EAXuB;AAY/CC,QAAAA,aAAa,EAAEA,aAAa,IAAI,EAZe;AAa/CC,QAAAA,OAAO,EAAEA,OAAO,IAAI,EAb2B;AAc/CC,QAAAA,MAAM,EAAEvF,OAAO,CAACuF,MAAR,IAAkB,EAdqB;AAe/CC,QAAAA,WAAW,EAAEA,WAAW,IAAI,EAfmB;AAgB/CK,QAAAA,eAAe,EAAEsC,sBAhB8B;AAiB/C1C,QAAAA,iBAAiB,EAAEmC,6BAA6B,GAAG,KAAKtG,qBAAL,CAA2B2E,aAA3B,CAAH,GAC5C,IAlB2C;AAmB/CP,QAAAA,YAAY,EAAEkC,6BAA6B,GAAG,KAAK/F,eAAL,CAAqBoE,aAArB,CAAH,GAAyC,IAnBrC;AAoB/CH,QAAAA,gBAAgB,EAAE;AApB6B,OAApC,CAAf;;AAsBA,UAAI8B,6BAAJ,EAAmC;AAC/BpB,QAAAA,QAAQ,CAACV,gBAAT,GACI,KAAK/D,mBAAL,CAAyBC,QAAzB,EAAmCiE,aAAnC,EAAkDO,QAAQ,CAACvE,MAA3D,EAAmEuE,QAAQ,CAACtE,OAA5E,CADJ;AAEH;;AACDwF,MAAAA,UAAU,GAAG;AAAElB,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBD,QAAAA,UAAU,EAAEvG;AAAlC,OAAb;;AACA,WAAKZ,4BAAL,CAAkC8D,GAAlC,CAAsC+C,aAAtC,EAAqDyB,UAArD;;AACA,aAAOA,UAAP;AACH,KAtGD;AAuGA;AACR;AACA;AACA;;;AACQnK,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCiJ,oBAAlC,GAAyD,UAAU5C,aAAV,EAAyB;AAC9E,UAAIjG,OAAO,GAAG,KAAKV,eAAL,CAAqBW,GAArB,CAAyBgG,aAAzB,CAAd;;AACA,UAAI,CAACjG,OAAL,EAAc;AACV,aAAKsH,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,gJAAgJT,aAAa,CAACpC,aAAD,CAA7J,GAA+K,GAAlM,CAAlB,EAA0NA,aAA1N;AACH;;AACD,aAAOjG,OAAP;AACH,KAND;;AAOAzC,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCmJ,mBAAlC,GAAwD,UAAU7H,OAAV,EAAmB;AACvE,UAAI8H,UAAU,GAAG,KAAKnG,YAAL,CAAkB3B,OAAlB,EAA2BpD,GAAG,CAACmL,kBAAJ,CAAuBC,SAAlD,CAAjB;;AACA,UAAI,CAACF,UAAL,EAAiB;AACb,aAAK1B,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,6DAA6DT,aAAa,CAACnH,OAAD,CAA1E,GAAsF,GAAzG,CAAlB,EAAiIA,OAAjI;AACH;;AACD,aAAO8H,UAAP;AACH,KAND;;AAOAzL,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCuJ,WAAlC,GAAgD,UAAUpJ,IAAV,EAAgB;AAC5D,aAAO,CAAC,CAAC,KAAK8C,YAAL,CAAkB9C,IAAlB,EAAwBjC,GAAG,CAACmL,kBAAJ,CAAuBC,SAA/C,CAAF,IACH,KAAKvK,kBAAL,CAAwBwK,WAAxB,CAAoCpJ,IAApC,CADJ;AAEH,KAHD;;AAIAxC,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCwJ,mBAAlC,GAAwD,UAAUrJ,IAAV,EAAgB;AACpE,UAAIiD,OAAO,GAAG,KAAKH,YAAL,CAAkB9C,IAAlB,EAAwBjC,GAAG,CAACmL,kBAAJ,CAAuBC,SAA/C,CAAd;;AACA,UAAIlG,OAAO,IAAI,CAACA,OAAO,CAACmC,WAAxB,EAAqC;AACjC,eAAO,CAACnC,OAAO,CAAChB,QAAhB;AACH;;AACD,UAAIqH,IAAI,GAAG,KAAK1K,kBAAL,CAAwBgJ,OAAxB,CAAgC5H,IAAhC,EAAsC,KAAtC,CAAX;;AACA,UAAIsJ,IAAI,IAAI,CAACtL,MAAM,CAAC8J,eAAP,CAAuBC,QAAvB,CAAgCuB,IAAhC,CAAb,EAAoD;AAChD,eAAO,CAACA,IAAI,CAACrH,QAAb;AACH;;AACD,aAAO,KAAP;AACH,KAVD;;AAWAzE,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC0J,MAAlC,GAA2C,UAAUvJ,IAAV,EAAgB;AACvD,aAAO,CAAC,CAAC,KAAK8C,YAAL,CAAkB9C,IAAlB,EAAwBjC,GAAG,CAACmL,kBAAJ,CAAuBM,IAA/C,CAAF,IACH,KAAK3K,aAAL,CAAmB0K,MAAnB,CAA0BvJ,IAA1B,CADJ;AAEH,KAHD;;AAIAxC,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC4J,UAAlC,GAA+C,UAAUzJ,IAAV,EAAgB;AAC3D,aAAO,CAAC,CAAC,KAAK8C,YAAL,CAAkB9C,IAAlB,EAAwBjC,GAAG,CAACmL,kBAAJ,CAAuBQ,QAA/C,CAAF,IACH,KAAK/K,iBAAL,CAAuB8K,UAAvB,CAAkCzJ,IAAlC,CADJ;AAEH,KAHD;;AAIAxC,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC8J,kBAAlC,GAAuD,UAAUC,UAAV,EAAsBC,iBAAtB,EAAyC;AAC5F,UAAIA,iBAAiB,KAAK,KAAK,CAA/B,EAAkC;AAAEA,QAAAA,iBAAiB,GAAG,IAApB;AAA2B;;AAC/D,UAAIC,aAAa,GAAG,KAAKhH,YAAL,CAAkB8G,UAAlB,EAA8B7L,GAAG,CAACmL,kBAAJ,CAAuBQ,QAArD,CAApB;;AACA,UAAI,CAACI,aAAL,EAAoB;AAChB,YAAIC,UAAU,GAAG,KAAKC,mBAAL,CAAyBJ,UAAzB,EAAqC,KAArC,EAA4CC,iBAA5C,CAAjB;AACAC,QAAAA,aAAa,GAAGC,UAAU,GAAGA,UAAU,CAAC/C,SAAX,EAAH,GAA4B,IAAtD;;AACA,YAAI8C,aAAJ,EAAmB;AACf,eAAKtK,aAAL,CAAmB2D,GAAnB,CAAuByG,UAAvB,EAAmCE,aAAnC;AACH;AACJ;;AACD,aAAOA,aAAP;AACH,KAXD;AAYA;AACR;AACA;;;AACQtM,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCoK,oCAAlC,GAAyE,UAAUL,UAAV,EAAsBzD,MAAtB,EAA8B+D,eAA9B,EAA+C;AACpH,UAAI9D,KAAK,GAAG,IAAZ;;AACA,UAAI8D,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,QAAAA,eAAe,GAAG,IAAlB;AAAyB;;AAC3D,UAAIC,QAAQ,GAAG,KAAKH,mBAAL,CAAyBJ,UAAzB,EAAqCM,eAArC,CAAf;AACA,UAAIE,OAAO,GAAG,EAAd;;AACA,UAAID,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACE,kBAAT,CAA4BC,OAA5B,CAAoC,UAAU1E,EAAV,EAAc;AAC9C,cAAI2E,OAAO,GAAGnE,KAAK,CAACJ,qBAAN,CAA4B4D,UAA5B,EAAwChE,EAAE,CAAC/D,SAA3C,EAAsDsE,MAAtD,CAAd;;AACA,cAAIoE,OAAJ,EAAa;AACTH,YAAAA,OAAO,CAACzH,IAAR,CAAa4H,OAAb;AACH;AACJ,SALD;AAMAJ,QAAAA,QAAQ,CAACK,aAAT,CAAuBF,OAAvB,CAA+B,UAAU1E,EAAV,EAAc;AAAE,iBAAOQ,KAAK,CAACqE,iBAAN,CAAwB7E,EAAE,CAAC/D,SAA3B,CAAP;AAA+C,SAA9F;AACH;;AACD,aAAO6I,OAAO,CAACC,GAAR,CAAYP,OAAZ,CAAP;AACH,KAfD;;AAgBA5M,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC+K,wBAAlC,GAA6D,UAAUhB,UAAV,EAAsB;AAC/E,UAAIiB,WAAW,GAAG,KAAKjL,mBAAL,CAAyBM,GAAzB,CAA6B0J,UAA7B,CAAlB;;AACA,UAAIiB,WAAJ,EAAiB;AACb,eAAOA,WAAP;AACH;;AACD,UAAIC,YAAY,GAAG7M,oBAAoB,CAAC8M,QAArB,CAA8B,KAAK5L,UAAL,CAAgB6L,kBAAhB,CAAmCpB,UAAnC,CAA9B,EAA8E5L,MAAM,CAACiN,cAAP,CAAsBlD,QAApG,CAAnB;AACA8C,MAAAA,WAAW,GAAG;AACV7K,QAAAA,IAAI,EAAE,KAAK6I,gBAAL,CAAsBe,UAAtB,CADI;AAEVsB,QAAAA,UAAU,EAAEJ,YAAY,CAAC/N,OAFf;AAGVoO,QAAAA,UAAU,EAAEL,YAAY,CAACM,OAHf;AAIVC,QAAAA,YAAY,EAAEP,YAAY,CAACzF;AAJjB,OAAd;;AAMA,WAAKzF,mBAAL,CAAyBuD,GAAzB,CAA6ByG,UAA7B,EAAyCiB,WAAzC;;AACA,aAAOA,WAAP;AACH,KAdD;;AAeArN,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCmK,mBAAlC,GAAwD,UAAUJ,UAAV,EAAsBM,eAAtB,EAAuCL,iBAAvC,EAA0D;AAC9G,UAAIzD,KAAK,GAAG,IAAZ;;AACA,UAAI8D,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,QAAAA,eAAe,GAAG,IAAlB;AAAyB;;AAC3D,UAAIL,iBAAiB,KAAK,KAAK,CAA/B,EAAkC;AAAEA,QAAAA,iBAAiB,GAAG,IAApB;AAA2B;;AAC/DD,MAAAA,UAAU,GAAGvL,MAAM,CAACiI,iBAAP,CAAyBsD,UAAzB,CAAb;;AACA,UAAIiB,WAAW,GAAG,KAAKnL,cAAL,CAAoBQ,GAApB,CAAwB0J,UAAxB,CAAlB;;AACA,UAAIiB,WAAJ,EAAiB;AACb,eAAOA,WAAP;AACH;;AACD,UAAIvB,IAAI,GAAG,KAAK3K,iBAAL,CAAuBiJ,OAAvB,CAA+BgC,UAA/B,EAA2CM,eAA3C,CAAX;;AACA,UAAI,CAACZ,IAAL,EAAW;AACP,eAAO,IAAP;AACH;;AACD,UAAIe,kBAAkB,GAAG,EAAzB;AACA,UAAIiB,4BAA4B,GAAG,EAAnC;AACA,UAAId,aAAa,GAAG,EAApB;AACA,UAAIe,eAAe,GAAG,EAAtB;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAInG,SAAS,GAAG,EAAhB;AACA,UAAIS,eAAe,GAAG,EAAtB;AACA,UAAI2F,mBAAmB,GAAG,EAA1B;AACA,UAAIC,OAAO,GAAG,EAAd;;AACA,UAAIpC,IAAI,CAAC8B,OAAT,EAAkB;AACd7C,QAAAA,qBAAqB,CAACe,IAAI,CAAC8B,OAAN,CAArB,CAAoCd,OAApC,CAA4C,UAAUqB,YAAV,EAAwB;AAChE,cAAIC,kBAAkB,GAAG1O,SAAzB;;AACA,cAAI2O,WAAW,CAACF,YAAD,CAAf,EAA+B;AAC3BC,YAAAA,kBAAkB,GAAGD,YAArB;AACH,WAFD,MAGK,IAAIA,YAAY,IAAIA,YAAY,CAACxB,QAAjC,EAA2C;AAC5C,gBAAI2B,mBAAmB,GAAGH,YAA1B;AACAC,YAAAA,kBAAkB,GAAGE,mBAAmB,CAAC3B,QAAzC;;AACA,gBAAI2B,mBAAmB,CAACzG,SAAxB,EAAmC;AAC/BA,cAAAA,SAAS,CAAC1C,IAAV,CAAe9B,KAAf,CAAqBwE,SAArB,EAAgC1H,OAAO,CAACiF,aAAR,CAAsB,EAAtB,EAA0BjF,OAAO,CAACkF,MAAR,CAAeuD,KAAK,CAACiC,qBAAN,CAA4ByD,mBAAmB,CAACzG,SAAhD,EAA2DS,eAA3D,EAA4E,gCAAgCwC,aAAa,CAACsD,kBAAD,CAA7C,GAAoE,GAAhJ,EAAqJ,EAArJ,EAAyJD,YAAzJ,CAAf,CAA1B,CAAhC;AACH;AACJ;;AACD,cAAIC,kBAAJ,EAAwB;AACpB,gBAAIxF,KAAK,CAAC2F,gBAAN,CAAuBnC,UAAvB,EAAmCgC,kBAAnC,CAAJ,EACI;AACJ,gBAAI,CAAC/B,iBAAL,EACIA,iBAAiB,GAAG,IAAImC,GAAJ,EAApB;;AACJ,gBAAInC,iBAAiB,CAACxD,GAAlB,CAAsBuF,kBAAtB,CAAJ,EAA+C;AAC3CxF,cAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB3C,KAAK,CAAC6F,kBAAN,CAAyBL,kBAAzB,IAA+C,IAA/C,GAAsDtD,aAAa,CAACqD,YAAD,CAAnE,GAAoF,2CAApF,GAAkIrD,aAAa,CAACsB,UAAD,CAA/I,GAA8J,IAAjL,CAAnB,EAA2MA,UAA3M;;AACA;AACH;;AACDC,YAAAA,iBAAiB,CAACqC,GAAlB,CAAsBN,kBAAtB;;AACA,gBAAIO,qBAAqB,GAAG/F,KAAK,CAACuD,kBAAN,CAAyBiC,kBAAzB,EAA6C/B,iBAA7C,CAA5B;;AACAA,YAAAA,iBAAiB,CAAC1J,MAAlB,CAAyByL,kBAAzB;;AACA,gBAAI,CAACO,qBAAL,EAA4B;AACxB,kBAAIC,GAAG,GAAG/N,MAAM,CAAC0K,WAAP,CAAmB,gBAAgB3C,KAAK,CAAC6F,kBAAN,CAAyBN,YAAzB,CAAhB,GAAyD,IAAzD,GAAgErD,aAAa,CAACqD,YAAD,CAA7E,GAA8F,4BAA9F,GAA6HrD,aAAa,CAACsB,UAAD,CAA1I,GAAyJ,uCAA5K,CAAV,CADwB,CAExB;AACA;;AACA,kBAAI+B,YAAY,YAAY/N,eAAe,CAACwD,YAA5C,EAA0D;AACtDgL,gBAAAA,GAAG,CAAC9N,qCAAD,CAAH,GAA6C;AACzC+N,kBAAAA,QAAQ,EAAEV,YAAY,CAACrK,QADkB;AAEzCgL,kBAAAA,SAAS,EAAEX,YAAY,CAACnL;AAFiB,iBAA7C;AAIH;;AACD4F,cAAAA,KAAK,CAACmB,YAAN,CAAmB6E,GAAnB,EAAwBxC,UAAxB;;AACA;AACH;;AACD2B,YAAAA,eAAe,CAAC5I,IAAhB,CAAqBwJ,qBAArB;AACH,WA1BD,MA2BK;AACD/F,YAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,uBAAuBT,aAAa,CAACqD,YAAD,CAApC,GAAqD,4BAArD,GAAoFrD,aAAa,CAACsB,UAAD,CAAjG,GAAgH,GAAnI,CAAnB,EAA4JA,UAA5J;;AACA;AACH;AACJ,SA3CD;AA4CH;;AACD,UAAIN,IAAI,CAACvM,OAAT,EAAkB;AACdwL,QAAAA,qBAAqB,CAACe,IAAI,CAACvM,OAAN,CAArB,CAAoCuN,OAApC,CAA4C,UAAUiC,YAAV,EAAwB;AAChE,cAAI,CAACV,WAAW,CAACU,YAAD,CAAhB,EAAgC;AAC5BnG,YAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,uBAAuBT,aAAa,CAACiE,YAAD,CAApC,GAAqD,4BAArD,GAAoFjE,aAAa,CAACsB,UAAD,CAAjG,GAAgH,GAAnI,CAAnB,EAA4JA,UAA5J;;AACA;AACH;;AACD,cAAI,CAACC,iBAAL,EACIA,iBAAiB,GAAG,IAAImC,GAAJ,EAApB;;AACJ,cAAInC,iBAAiB,CAACxD,GAAlB,CAAsBkG,YAAtB,CAAJ,EAAyC;AACrCnG,YAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB3C,KAAK,CAAC6F,kBAAN,CAAyBM,YAAzB,IAAyC,IAAzC,GAAgDlO,MAAM,CAACuC,SAAP,CAAiB2L,YAAjB,CAAhD,GAAiF,2CAAjF,GAA+HjE,aAAa,CAACsB,UAAD,CAA5I,GAA2J,GAA9K,CAAnB,EAAuMA,UAAvM;;AACA;AACH;;AACDC,UAAAA,iBAAiB,CAACqC,GAAlB,CAAsBK,YAAtB;;AACA,cAAIC,qBAAqB,GAAGpG,KAAK,CAACuD,kBAAN,CAAyB4C,YAAzB,EAAuC1C,iBAAvC,CAA5B;;AACAA,UAAAA,iBAAiB,CAAC1J,MAAlB,CAAyBoM,YAAzB;;AACA,cAAIC,qBAAJ,EAA2B;AACvBhB,YAAAA,eAAe,CAAC7I,IAAhB,CAAqB6J,qBAArB;AACH,WAFD,MAGK;AACDlB,YAAAA,4BAA4B,CAAC3I,IAA7B,CAAkCyD,KAAK,CAACqG,sBAAN,CAA6BF,YAA7B,CAAlC;AACH;AACJ,SApBD;AAqBH,OA1F6G,CA2F9G;AACA;;;AACA,UAAIG,gBAAgB,GAAG,KAAKC,8BAAL,CAAoCpB,eAApC,EAAqDC,eAArD,CAAvB;;AACA,UAAIlC,IAAI,CAACsD,YAAT,EAAuB;AACnBrE,QAAAA,qBAAqB,CAACe,IAAI,CAACsD,YAAN,CAArB,CAAyCtC,OAAzC,CAAiD,UAAUuC,YAAV,EAAwB;AACrE,cAAI,CAAChB,WAAW,CAACgB,YAAD,CAAhB,EAAgC;AAC5BzG,YAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,uBAAuBT,aAAa,CAACuE,YAAD,CAApC,GAAqD,4BAArD,GAAoFvE,aAAa,CAACsB,UAAD,CAAjG,GAAgH,GAAnI,CAAnB,EAA4JA,UAA5J;;AACA;AACH;;AACD,cAAIkD,kBAAkB,GAAG1G,KAAK,CAACqG,sBAAN,CAA6BI,YAA7B,CAAzB;;AACA,cAAIzG,KAAK,CAACgD,WAAN,CAAkByD,YAAlB,CAAJ,EAAqC;AACjC,gBAAIzG,KAAK,CAACiD,mBAAN,CAA0BwD,YAA1B,CAAJ,EAA6C;AACzCzG,cAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,eAAeT,aAAa,CAACuE,YAAD,CAA5B,GAA6C,kCAAhE,CAAnB,EAAwHA,YAAxH;AACH;;AACDH,YAAAA,gBAAgB,CAACK,YAAjB,CAA8BD,kBAA9B;AACAzC,YAAAA,kBAAkB,CAAC1H,IAAnB,CAAwBmK,kBAAxB;;AACA1G,YAAAA,KAAK,CAAC4G,gBAAN,CAAuBH,YAAvB,EAAqCjD,UAArC;AACH,WAPD,MAQK,IAAIxD,KAAK,CAACmD,MAAN,CAAasD,YAAb,CAAJ,EAAgC;AACjCH,YAAAA,gBAAgB,CAACO,OAAjB,CAAyBH,kBAAzB;AACAJ,YAAAA,gBAAgB,CAACQ,KAAjB,CAAuBvK,IAAvB,CAA4BmK,kBAA5B;AACAtC,YAAAA,aAAa,CAAC7H,IAAd,CAAmBmK,kBAAnB;;AACA1G,YAAAA,KAAK,CAAC4G,gBAAN,CAAuBH,YAAvB,EAAqCjD,UAArC;AACH,WALI,MAMA;AACDxD,YAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,gBAAgB3C,KAAK,CAAC6F,kBAAN,CAAyBY,YAAzB,CAAhB,GAAyD,IAAzD,GAAgEvE,aAAa,CAACuE,YAAD,CAA7E,GAA8F,4BAA9F,GAA6HvE,aAAa,CAACsB,UAAD,CAA1I,GAAyJ,yDAA5K,CAAnB,EAA2PA,UAA3P;;AACA;AACH;AACJ,SAxBD;AAyBH;;AACD,UAAIuD,kBAAkB,GAAG,EAAzB;AACA,UAAIC,aAAa,GAAG,EAApB;AACA9B,MAAAA,4BAA4B,CAAChB,OAA7B,CAAqC,UAAU+C,UAAV,EAAsB;AACvD,YAAIX,gBAAgB,CAACY,aAAjB,CAA+BjH,GAA/B,CAAmCgH,UAAU,CAACxL,SAA9C,CAAJ,EAA8D;AAC1DsL,UAAAA,kBAAkB,CAACxK,IAAnB,CAAwB0K,UAAxB;AACAX,UAAAA,gBAAgB,CAACa,oBAAjB,CAAsCF,UAAtC;AACH,SAHD,MAIK,IAAIX,gBAAgB,CAACc,QAAjB,CAA0BnH,GAA1B,CAA8BgH,UAAU,CAACxL,SAAzC,CAAJ,EAAyD;AAC1DuL,UAAAA,aAAa,CAACzK,IAAd,CAAmB0K,UAAnB;AACAX,UAAAA,gBAAgB,CAACe,eAAjB,CAAiCJ,UAAjC;AACH,SAHI,MAIA;AACDjH,UAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,kBAAkB3C,KAAK,CAAC6F,kBAAN,CAAyBoB,UAAU,CAACxL,SAApC,CAAlB,GAAmE,GAAnE,GAAyEyG,aAAa,CAAC+E,UAAU,CAACxL,SAAZ,CAAtF,GAA+G,QAA/G,GAA0HyG,aAAa,CAACsB,UAAD,CAAvI,GAAsJ,2CAAzK,CAAnB,EAA0OA,UAA1O;;AACA;AACH;AACJ,OAbD,EA3H8G,CAyI9G;AACA;;AACA,UAAIN,IAAI,CAACjE,SAAT,EAAoB;AAChBA,QAAAA,SAAS,CAAC1C,IAAV,CAAe9B,KAAf,CAAqBwE,SAArB,EAAgC1H,OAAO,CAACiF,aAAR,CAAsB,EAAtB,EAA0BjF,OAAO,CAACkF,MAAR,CAAe,KAAKwF,qBAAL,CAA2BiB,IAAI,CAACjE,SAAhC,EAA2CS,eAA3C,EAA4D,gCAAgCwC,aAAa,CAACsB,UAAD,CAA7C,GAA4D,GAAxH,EAA6H,EAA7H,EAAiIA,UAAjI,CAAf,CAA1B,CAAhC;AACH;;AACD,UAAIN,IAAI,CAACxD,eAAT,EAA0B;AACtBA,QAAAA,eAAe,CAACnD,IAAhB,CAAqB9B,KAArB,CAA2BiF,eAA3B,EAA4CnI,OAAO,CAACiF,aAAR,CAAsB,EAAtB,EAA0BjF,OAAO,CAACkF,MAAR,CAAe0F,qBAAqB,CAACe,IAAI,CAACxD,eAAN,CAArB,CAChF0C,GADgF,CAC5E,UAAUxI,IAAV,EAAgB;AAAE,iBAAOoG,KAAK,CAACqC,0BAAN,CAAiCzI,IAAjC,CAAP;AAAgD,SADU,CAAf,CAA1B,CAA5C;AAEH;;AACD,UAAIsJ,IAAI,CAACoE,SAAT,EAAoB;AAChBnF,QAAAA,qBAAqB,CAACe,IAAI,CAACoE,SAAN,CAArB,CAAsCpD,OAAtC,CAA8C,UAAUtK,IAAV,EAAgB;AAC1D,cAAI,CAAC6L,WAAW,CAAC7L,IAAD,CAAhB,EAAwB;AACpBoG,YAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,uBAAuBT,aAAa,CAACtI,IAAD,CAApC,GAA6C,8CAA7C,GAA8FsI,aAAa,CAACsB,UAAD,CAA3G,GAA0H,GAA7I,CAAnB,EAAsKA,UAAtK;;AACA;AACH;;AACD6B,UAAAA,mBAAmB,CAAC9I,IAApB,CAAyByD,KAAK,CAACqG,sBAAN,CAA6BzM,IAA7B,CAAzB;AACH,SAND;AAOH;;AACD8F,MAAAA,eAAe,CAACnD,IAAhB,CAAqB9B,KAArB,CAA2BiF,eAA3B,EAA4CnI,OAAO,CAACiF,aAAR,CAAsB,EAAtB,EAA0BjF,OAAO,CAACkF,MAAR,CAAe4I,mBAAmB,CAACjD,GAApB,CAAwB,UAAUxI,IAAV,EAAgB;AAAE,eAAOoG,KAAK,CAACqC,0BAAN,CAAiCzI,IAAI,CAAC6B,SAAtC,CAAP;AAA0D,OAApG,CAAf,CAA1B,CAA5C;;AACA,UAAIyH,IAAI,CAACoC,OAAT,EAAkB;AACdA,QAAAA,OAAO,CAAC/I,IAAR,CAAa9B,KAAb,CAAmB6K,OAAnB,EAA4B/N,OAAO,CAACiF,aAAR,CAAsB,EAAtB,EAA0BjF,OAAO,CAACkF,MAAR,CAAe0F,qBAAqB,CAACe,IAAI,CAACoC,OAAN,CAApC,CAA1B,CAA5B;AACH;;AACDb,MAAAA,WAAW,GAAG,IAAI9M,GAAG,CAAC4P,uBAAR,CAAgC;AAC1C3N,QAAAA,IAAI,EAAE,KAAK6I,gBAAL,CAAsBe,UAAtB,CADoC;AAE1CvE,QAAAA,SAAS,EAAEA,SAF+B;AAG1CS,QAAAA,eAAe,EAAEA,eAHyB;AAI1C2F,QAAAA,mBAAmB,EAAEA,mBAJqB;AAK1CC,QAAAA,OAAO,EAAEA,OALiC;AAM1CrB,QAAAA,kBAAkB,EAAEA,kBANsB;AAO1C8C,QAAAA,kBAAkB,EAAEA,kBAPsB;AAQ1C3C,QAAAA,aAAa,EAAEA,aAR2B;AAS1C4C,QAAAA,aAAa,EAAEA,aAT2B;AAU1C7B,QAAAA,eAAe,EAAEA,eAVyB;AAW1CC,QAAAA,eAAe,EAAEA,eAXyB;AAY1CkB,QAAAA,gBAAgB,EAAEA,gBAZwB;AAa1C9G,QAAAA,EAAE,EAAE0D,IAAI,CAAC1D,EAAL,IAAW;AAb2B,OAAhC,CAAd;AAeAE,MAAAA,eAAe,CAACwE,OAAhB,CAAwB,UAAU1E,EAAV,EAAc;AAAE,eAAO8G,gBAAgB,CAACkB,iBAAjB,CAAmChI,EAAnC,CAAP;AAAgD,OAAxF;AACAP,MAAAA,SAAS,CAACiF,OAAV,CAAkB,UAAUuD,QAAV,EAAoB;AAAE,eAAOnB,gBAAgB,CAACoB,WAAjB,CAA6BD,QAA7B,EAAuChD,WAAW,CAAC7K,IAAnD,CAAP;AAAkE,OAA1G;AACA0M,MAAAA,gBAAgB,CAACqB,SAAjB,CAA2BlD,WAAW,CAAC7K,IAAvC;;AACA,WAAKN,cAAL,CAAoByD,GAApB,CAAwByG,UAAxB,EAAoCiB,WAApC;;AACA,aAAOA,WAAP;AACH,KAnLD;;AAoLArN,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCkM,gBAAlC,GAAqD,UAAUnC,UAAV,EAAsBgC,kBAAtB,EAA0C;AAC3F,UAAIhC,UAAU,KAAKgC,kBAAnB,EAAuC;AACnC,aAAKrE,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,MAAMT,aAAa,CAACsB,UAAD,CAAnB,GAAkC,8BAArD,CAAlB,EAAwGA,UAAxG;;AACA,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH,KAND;;AAOApM,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCoM,kBAAlC,GAAuD,UAAUjM,IAAV,EAAgB;AACnE,UAAI6L,WAAW,CAAC7L,IAAD,CAAf,EAAuB;AACnB,YAAI,KAAKoJ,WAAL,CAAiBpJ,IAAjB,CAAJ,EAA4B;AACxB,iBAAO,WAAP;AACH;;AACD,YAAI,KAAKuJ,MAAL,CAAYvJ,IAAZ,CAAJ,EAAuB;AACnB,iBAAO,MAAP;AACH;;AACD,YAAI,KAAKyJ,UAAL,CAAgBzJ,IAAhB,CAAJ,EAA2B;AACvB,iBAAO,QAAP;AACH;AACJ;;AACD,UAAIA,IAAI,CAACgO,OAAT,EAAkB;AACd,eAAO,UAAP;AACH;;AACD,aAAO,OAAP;AACH,KAhBD;;AAiBAxQ,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCmN,gBAAlC,GAAqD,UAAUhN,IAAV,EAAgB4J,UAAhB,EAA4B;AAC7E,UAAIqE,SAAS,GAAG,KAAKtO,gBAAL,CAAsBO,GAAtB,CAA0BF,IAA1B,CAAhB;;AACA,UAAIiO,SAAS,IAAIA,SAAS,KAAKrE,UAA/B,EAA2C;AACvC,aAAKrC,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,UAAUT,aAAa,CAACtI,IAAD,CAAvB,GAAgC,6CAAhC,GAAgFsI,aAAa,CAAC2F,SAAD,CAA7F,GAA2G,OAA3G,GAAqH3F,aAAa,CAACsB,UAAD,CAAlI,GAAiJ,IAAjJ,IAChC,4BAA4BtB,aAAa,CAACtI,IAAD,CAAzC,GAAkD,mCAAlD,GAAwFsI,aAAa,CAAC2F,SAAD,CAArG,GAAmH,OAAnH,GAA6H3F,aAAa,CAACsB,UAAD,CAA1I,GAAyJ,IADzH,KAEhC,kEAAkEtB,aAAa,CAACtI,IAAD,CAA/E,GAAwF,gCAAxF,GAA2HsI,aAAa,CAAC2F,SAAD,CAAxI,GAAsJ,OAAtJ,GAAgK3F,aAAa,CAACsB,UAAD,CAA7K,GAA4L,GAF5J,CAAnB,CAAlB,EAEwMA,UAFxM;;AAGA;AACH;;AACD,WAAKjK,gBAAL,CAAsBwD,GAAtB,CAA0BnD,IAA1B,EAAgC4J,UAAhC;AACH,KATD;;AAUApM,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC8M,8BAAlC,GAAmE,UAAUpB,eAAV,EAA2BC,eAA3B,EAA4C;AAC3G;AACA,UAAI0C,MAAM,GAAG,IAAInQ,GAAG,CAACoQ,iCAAR,EAAb;AACA,UAAIC,cAAc,GAAG,IAAI9O,GAAJ,EAArB;AACAiM,MAAAA,eAAe,CAAC7C,MAAhB,CAAuB8C,eAAvB,EAAwClB,OAAxC,CAAgD,UAAU+D,UAAV,EAAsB;AAClEA,QAAAA,UAAU,CAACC,OAAX,CAAmBhE,OAAnB,CAA2B,UAAUiE,GAAV,EAAe;AAAE,iBAAOL,MAAM,CAACH,SAAP,CAAiBQ,GAAjB,CAAP;AAA+B,SAA3E;AACAF,QAAAA,UAAU,CAACvI,eAAX,CAA2BwE,OAA3B,CAAmC,UAAUkE,IAAV,EAAgB;AAAE,iBAAON,MAAM,CAACN,iBAAP,CAAyBY,IAAzB,CAAP;AAAwC,SAA7F;AACA,YAAIC,WAAW,GAAG,IAAIzC,GAAJ,EAAlB;AACAqC,QAAAA,UAAU,CAAChJ,SAAX,CAAqBiF,OAArB,CAA6B,UAAUoE,KAAV,EAAiB;AAC1C,cAAIC,QAAQ,GAAG5Q,GAAG,CAAC6Q,cAAJ,CAAmBF,KAAK,CAACb,QAAN,CAAegB,KAAlC,CAAf;AACA,cAAIC,WAAW,GAAGV,cAAc,CAAClO,GAAf,CAAmByO,QAAnB,CAAlB;;AACA,cAAI,CAACG,WAAL,EAAkB;AACdA,YAAAA,WAAW,GAAG,IAAI9C,GAAJ,EAAd;AACAoC,YAAAA,cAAc,CAACjL,GAAf,CAAmBwL,QAAnB,EAA6BG,WAA7B;AACH;;AACD,cAAIC,SAAS,GAAGL,KAAK,CAAC5R,MAAN,CAAa+E,SAA7B,CAP0C,CAQ1C;AACA;;AACA,cAAI4M,WAAW,CAACpI,GAAZ,CAAgBsI,QAAhB,KAA6B,CAACG,WAAW,CAACzI,GAAZ,CAAgB0I,SAAhB,CAAlC,EAA8D;AAC1DD,YAAAA,WAAW,CAAC5C,GAAZ,CAAgB6C,SAAhB;AACAN,YAAAA,WAAW,CAACvC,GAAZ,CAAgByC,QAAhB;AACAT,YAAAA,MAAM,CAACJ,WAAP,CAAmBY,KAAK,CAACb,QAAzB,EAAmCa,KAAK,CAAC5R,MAAzC;AACH;AACJ,SAfD;AAgBH,OApBD;AAqBA0O,MAAAA,eAAe,CAAClB,OAAhB,CAAwB,UAAU+D,UAAV,EAAsB;AAC1CA,QAAAA,UAAU,CAAClB,kBAAX,CAA8B7C,OAA9B,CAAsC,UAAU1E,EAAV,EAAc;AAAE,iBAAOsI,MAAM,CAACX,oBAAP,CAA4B3H,EAA5B,CAAP;AAAyC,SAA/F;AACAyI,QAAAA,UAAU,CAACjB,aAAX,CAAyB9C,OAAzB,CAAiC,UAAU1E,EAAV,EAAc;AAAE,iBAAOsI,MAAM,CAACT,eAAP,CAAuB7H,EAAvB,CAAP;AAAoC,SAArF;AACH,OAHD;AAIA2F,MAAAA,eAAe,CAACjB,OAAhB,CAAwB,UAAU+D,UAAV,EAAsB;AAC1CA,QAAAA,UAAU,CAAClB,kBAAX,CAA8B7C,OAA9B,CAAsC,UAAU1E,EAAV,EAAc;AAAE,iBAAOsI,MAAM,CAACnB,YAAP,CAAoBnH,EAApB,CAAP;AAAiC,SAAvF;AACAyI,QAAAA,UAAU,CAACjB,aAAX,CAAyB9C,OAAzB,CAAiC,UAAU1E,EAAV,EAAc;AAAE,iBAAOsI,MAAM,CAACjB,OAAP,CAAerH,EAAf,CAAP;AAA4B,SAA7E;AACH,OAHD;AAIA,aAAOsI,MAAP;AACH,KAlCD;;AAmCA1Q,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC4M,sBAAlC,GAA2D,UAAUzM,IAAV,EAAgB;AACvEA,MAAAA,IAAI,GAAG3B,MAAM,CAACiI,iBAAP,CAAyBtG,IAAzB,CAAP;AACA,aAAO;AAAE6B,QAAAA,SAAS,EAAE7B;AAAb,OAAP;AACH,KAHD;;AAIAxC,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCmP,YAAlC,GAAiD,UAAUhP,IAAV,EAAgB;AAC7D,UAAIiP,WAAW,GAAG,KAAK9P,UAAL,CAAgB+P,cAAhB,CAA+BlP,IAA/B,CAAlB;;AACA,aAAOiP,WAAW,CAACE,IAAZ,CAAiB,UAAUC,GAAV,EAAe;AAAE,eAAOpR,MAAM,CAACqR,gBAAP,CAAwBtH,QAAxB,CAAiCqH,GAAjC,CAAP;AAA+C,OAAjF,CAAP;AACH,KAHD;;AAIA5R,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCyP,oBAAlC,GAAyD,UAAUtP,IAAV,EAAgB;AACrE,aAAO;AACHoD,QAAAA,WAAW,EAAErF,GAAG,CAACmL,kBAAJ,CAAuBqG,UADjC;AAEHvP,QAAAA,IAAI,EAAE,KAAK6I,gBAAL,CAAsB7I,IAAtB,EAA4B,IAA5B,EAAkC,KAAlC;AAFH,OAAP;AAIH,KALD;;AAMAxC,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC2P,qBAAlC,GAA0D,UAAUxP,IAAV,EAAgByP,YAAhB,EAA8BC,kBAA9B,EAAkD;AACxG,UAAID,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,QAAAA,YAAY,GAAG,IAAf;AAAsB;;AACrD,UAAIC,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AAAEA,QAAAA,kBAAkB,GAAG,IAArB;AAA4B;;AACjE,UAAI1M,WAAW,GAAG,KAAKF,YAAL,CAAkB9C,IAAlB,EAAwBjC,GAAG,CAACmL,kBAAJ,CAAuBqG,UAA/C,CAAlB;;AACA,UAAII,YAAY,GAAG3M,WAAW,GAC1BA,WAAW,CAAChD,IADc,GAE1B,KAAK6I,gBAAL,CAAsB7I,IAAtB,EAA4ByP,YAA5B,EAA0CC,kBAA1C,CAFJ;;AAGA,UAAIT,WAAW,GAAG,KAAK9P,UAAL,CAAgB8P,WAAhB,CAA4BjP,IAA5B,EAAkC4P,MAAlC,CAAyC,UAAUR,GAAV,EAAe;AAAE,eAAOpR,MAAM,CAACqR,gBAAP,CAAwBtH,QAAxB,CAAiCqH,GAAjC,CAAP;AAA+C,OAAzG,CAAlB;;AACA,UAAIH,WAAW,CAACY,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,eAAO,IAAP;AACH;;AACD,UAAIvG,IAAI,GAAG2F,WAAW,CAACA,WAAW,CAACY,MAAZ,GAAqB,CAAtB,CAAtB;AACA,aAAO;AACHC,QAAAA,MAAM,EAAE9P,IADL;AAEHA,QAAAA,IAAI,EAAE2P,YAFH;AAGHI,QAAAA,UAAU,EAAEzG,IAAI,CAACyG,UAHd;AAIHC,QAAAA,QAAQ,EAAE1G,IAAI,CAAC0G,QAJZ;AAKHC,QAAAA,QAAQ,EAAE3G,IAAI,CAAC2G,QALZ;AAMHC,QAAAA,WAAW,EAAE5G,IAAI,CAAC4G,WANf;AAOHC,QAAAA,UAAU,EAAE7G,IAAI,CAAC6G,UAPd;AAQHC,QAAAA,IAAI,EAAE9G,IAAI,CAAC8G;AARR,OAAP;AAUH,KAtBD;;AAuBA5S,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCgJ,gBAAlC,GAAqD,UAAU7I,IAAV,EAAgByP,YAAhB,EAA8BC,kBAA9B,EAAkD;AACnG,UAAID,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,QAAAA,YAAY,GAAG,IAAf;AAAsB;;AACrD,UAAIC,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AAAEA,QAAAA,kBAAkB,GAAG,IAArB;AAA4B;;AACjE,UAAIW,UAAU,GAAG,KAAK5D,sBAAL,CAA4BzM,IAA5B,CAAjB;;AACA,aAAO;AACH6B,QAAAA,SAAS,EAAEwO,UAAU,CAACxO,SADnB;AAEHqC,QAAAA,MAAM,EAAE,KAAKoM,wBAAL,CAA8BD,UAAU,CAACxO,SAAzC,EAAoD4N,YAApD,EAAkEC,kBAAlE,CAFL;AAGHvL,QAAAA,cAAc,EAAEhG,qBAAqB,CAACoS,oBAAtB,CAA2C,KAAKpR,UAAhD,EAA4DkR,UAAU,CAACxO,SAAvE;AAHb,OAAP;AAKH,KATD;;AAUArE,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC2Q,mBAAlC,GAAwD,UAAU3T,OAAV,EAAmB4S,YAAnB,EAAiC;AACrF,UAAIA,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,QAAAA,YAAY,GAAG,IAAf;AAAsB;;AACrD5S,MAAAA,OAAO,GAAGwB,MAAM,CAACiI,iBAAP,CAAyBzJ,OAAzB,CAAV;AACA,aAAO;AAAEgF,QAAAA,SAAS,EAAEhF,OAAb;AAAsBqH,QAAAA,MAAM,EAAE,KAAKoM,wBAAL,CAA8BzT,OAA9B,EAAuC4S,YAAvC;AAA9B,OAAP;AACH,KAJD;AAKA;AACR;AACA;AACA;;;AACQjS,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC4Q,eAAlC,GAAoD,UAAUC,QAAV,EAAoB;AACpE,UAAIC,QAAQ,GAAG,KAAKlR,UAAL,CAAgBS,GAAhB,CAAoBwQ,QAApB,CAAf;;AACA,UAAI,CAACC,QAAL,EAAe;AACX,aAAKpJ,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,sIAAsIT,aAAa,CAACoI,QAAD,CAAnJ,GAAgK,GAAnL,CAAlB,EAA2MA,QAA3M;AACH;;AACD,aAAOC,QAAQ,IAAI,IAAnB;AACH,KAND;;AAOAnT,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC+Q,cAAlC,GAAmD,UAAUF,QAAV,EAAoB;AACnE,UAAIG,WAAW,GAAG,KAAK/N,YAAL,CAAkB4N,QAAlB,EAA4B3S,GAAG,CAACmL,kBAAJ,CAAuBM,IAAnD,CAAlB;;AACA,UAAI,CAACqH,WAAL,EAAkB;AACd,aAAKtJ,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,wDAAwDT,aAAa,CAACoI,QAAD,CAArE,GAAkF,GAArG,CAAlB,EAA6HA,QAA7H;AACH;;AACD,aAAOG,WAAP;AACH,KAND;;AAOArT,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCiR,qBAAlC,GAA0D,UAAUJ,QAAV,EAAoB;AAC1E,UAAIC,QAAQ,GAAG,KAAKlR,UAAL,CAAgBS,GAAhB,CAAoBwQ,QAApB,CAAf;;AACA,UAAI,CAACC,QAAL,EAAe;AACXA,QAAAA,QAAQ,GAAG,KAAKlG,iBAAL,CAAuBiG,QAAvB,CAAX;AACH;;AACD,aAAOC,QAAP;AACH,KAND;;AAOAnT,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC4K,iBAAlC,GAAsD,UAAUiG,QAAV,EAAoB;AACtEA,MAAAA,QAAQ,GAAGrS,MAAM,CAACiI,iBAAP,CAAyBoK,QAAzB,CAAX;;AACA,UAAIK,cAAc,GAAG,KAAKlS,aAAL,CAAmB+I,OAAnB,CAA2B8I,QAA3B,CAArB;;AACA,UAAIC,QAAQ,GAAG,IAAI5S,GAAG,CAACiT,mBAAR,CAA4B;AACvChR,QAAAA,IAAI,EAAE,KAAK6I,gBAAL,CAAsB6H,QAAtB,CADiC;AAEvClQ,QAAAA,IAAI,EAAEuQ,cAAc,CAACvQ,IAFkB;AAGvCyQ,QAAAA,IAAI,EAAE,CAAC,CAACF,cAAc,CAACE;AAHgB,OAA5B,CAAf;;AAKA,WAAKxR,UAAL,CAAgB0D,GAAhB,CAAoBuN,QAApB,EAA8BC,QAA9B;;AACA,WAAKnR,aAAL,CAAmB2D,GAAnB,CAAuBuN,QAAvB,EAAiCC,QAAQ,CAAC3J,SAAT,EAAjC;;AACA,aAAO2J,QAAP;AACH,KAXD;;AAYAnT,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCyQ,wBAAlC,GAA6D,UAAUY,UAAV,EAAsBzB,YAAtB,EAAoCC,kBAApC,EAAwD;AACjH,UAAItJ,KAAK,GAAG,IAAZ;;AACA,UAAIsJ,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AAAEA,QAAAA,kBAAkB,GAAG,IAArB;AAA4B;;AACjE,UAAIyB,cAAc,GAAG,KAArB;AACA,UAAIC,MAAM,GAAG3B,YAAY,IAAI,KAAKtQ,UAAL,CAAgBkS,UAAhB,CAA2BH,UAA3B,CAAhB,IAA0D,EAAvE;AACA,UAAII,oBAAoB,GAAGF,MAAM,CAAC5I,GAAP,CAAW,UAAU+I,KAAV,EAAiB;AACnD,YAAIC,WAAW,GAAG,KAAlB;AACA,YAAIvN,MAAM,GAAG,KAAb;AACA,YAAIwN,MAAM,GAAG,KAAb;AACA,YAAIC,UAAU,GAAG,KAAjB;AACA,YAAIC,UAAU,GAAG,KAAjB;AACA,YAAI9C,KAAK,GAAG,IAAZ;;AACA,YAAI+C,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAJ,EAA0B;AACtBA,UAAAA,KAAK,CAACjH,OAAN,CAAc,UAAUwH,UAAV,EAAsB;AAChC,gBAAI9T,MAAM,CAAC+T,UAAP,CAAkBhK,QAAlB,CAA2B+J,UAA3B,CAAJ,EAA4C;AACxC7N,cAAAA,MAAM,GAAG,IAAT;AACH,aAFD,MAGK,IAAIjG,MAAM,CAACgU,UAAP,CAAkBjK,QAAlB,CAA2B+J,UAA3B,CAAJ,EAA4C;AAC7CL,cAAAA,MAAM,GAAG,IAAT;AACH,aAFI,MAGA,IAAIzT,MAAM,CAACiU,cAAP,CAAsBlK,QAAtB,CAA+B+J,UAA/B,CAAJ,EAAgD;AACjDJ,cAAAA,UAAU,GAAG,IAAb;AACH,aAFI,MAGA,IAAI1T,MAAM,CAACkU,cAAP,CAAsBnK,QAAtB,CAA+B+J,UAA/B,CAAJ,EAAgD;AACjDH,cAAAA,UAAU,GAAG,IAAb;AACH,aAFI,MAGA,IAAI3T,MAAM,CAACmU,eAAP,CAAuBpK,QAAvB,CAAgC+J,UAAhC,CAAJ,EAAiD;AAClDN,cAAAA,WAAW,GAAG,IAAd;AACA3C,cAAAA,KAAK,GAAGiD,UAAU,CAACM,aAAnB;AACH,aAHI,MAIA,IAAIpU,MAAM,CAACqU,YAAP,CAAoBtK,QAApB,CAA6B+J,UAA7B,CAAJ,EAA8C;AAC/CjD,cAAAA,KAAK,GAAGiD,UAAU,CAACjD,KAAnB;AACH,aAFI,MAGA,IAAI7Q,MAAM,CAACsU,oBAAP,CAA4BvK,QAA5B,CAAqC+J,UAArC,KACLA,UAAU,YAAYlU,eAAe,CAACwD,YADrC,EACmD;AACpDyN,cAAAA,KAAK,GAAGiD,UAAR;AACH,aAHI,MAIA,IAAIjG,WAAW,CAACiG,UAAD,CAAX,IAA2BjD,KAAK,IAAI,IAAxC,EAA8C;AAC/CA,cAAAA,KAAK,GAAGiD,UAAR;AACH;AACJ,WA3BD;AA4BH,SA7BD,MA8BK;AACDjD,UAAAA,KAAK,GAAG0C,KAAR;AACH;;AACD,YAAI1C,KAAK,IAAI,IAAb,EAAmB;AACfsC,UAAAA,cAAc,GAAG,IAAjB;AACA,iBAAO,EAAP;AACH;;AACD,eAAO;AACHK,UAAAA,WAAW,EAAEA,WADV;AAEHvN,UAAAA,MAAM,EAAEA,MAFL;AAGHwN,UAAAA,MAAM,EAAEA,MAHL;AAIHC,UAAAA,UAAU,EAAEA,UAJT;AAKHC,UAAAA,UAAU,EAAEA,UALT;AAMH9C,UAAAA,KAAK,EAAEzI,KAAK,CAACmM,iBAAN,CAAwB1D,KAAxB;AANJ,SAAP;AAQH,OApD0B,CAA3B;;AAqDA,UAAIsC,cAAJ,EAAoB;AAChB,YAAIqB,UAAU,GAAGlB,oBAAoB,CAAC9I,GAArB,CAAyB,UAAUiK,GAAV,EAAe;AAAE,iBAAOA,GAAG,CAAC5D,KAAJ,GAAYvG,aAAa,CAACmK,GAAG,CAAC5D,KAAL,CAAzB,GAAuC,GAA9C;AAAoD,SAA9F,EAAgG6D,IAAhG,CAAqG,IAArG,CAAjB;AACA,YAAIC,OAAO,GAAG,sCAAsCrK,aAAa,CAAC4I,UAAD,CAAnD,GAAkE,KAAlE,GAA0EsB,UAA1E,GAAuF,IAArG;;AACA,YAAI9C,kBAAkB,IAAI,KAAKjR,OAAL,CAAamU,yBAAvC,EAAkE;AAC9D,eAAKrL,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB4J,OAAnB,CAAlB,EAA+CzB,UAA/C;AACH;AACJ;;AACD,aAAOI,oBAAP;AACH,KAlED;;AAmEA9T,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC0S,iBAAlC,GAAsD,UAAU1D,KAAV,EAAiB;AACnEA,MAAAA,KAAK,GAAGxQ,MAAM,CAACiI,iBAAP,CAAyBuI,KAAzB,CAAR;AACA,UAAIgE,YAAJ;;AACA,UAAI,OAAOhE,KAAP,KAAiB,QAArB,EAA+B;AAC3BgE,QAAAA,YAAY,GAAG;AAAEtV,UAAAA,KAAK,EAAEsR;AAAT,SAAf;AACH,OAFD,MAGK;AACDgE,QAAAA,YAAY,GAAG;AAAExC,UAAAA,UAAU,EAAE;AAAExO,YAAAA,SAAS,EAAEgN;AAAb;AAAd,SAAf;AACH;;AACD,aAAOgE,YAAP;AACH,KAVD;;AAWArV,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCwI,qBAAlC,GAA0D,UAAUhD,SAAV,EAAqByN,qBAArB,EAA4CC,SAA5C,EAAuDC,gBAAvD,EAAyEhT,IAAzE,EAA+E;AACrI,UAAIoG,KAAK,GAAG,IAAZ;;AACA,UAAI4M,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,QAAAA,gBAAgB,GAAG,EAAnB;AAAwB;;AAC3D3N,MAAAA,SAAS,CAACiF,OAAV,CAAkB,UAAUuD,QAAV,EAAoBoF,WAApB,EAAiC;AAC/C,YAAIrB,KAAK,CAACC,OAAN,CAAchE,QAAd,CAAJ,EAA6B;AACzBzH,UAAAA,KAAK,CAACiC,qBAAN,CAA4BwF,QAA5B,EAAsCiF,qBAAtC,EAA6DC,SAA7D,EAAwEC,gBAAxE;AACH,SAFD,MAGK;AACDnF,UAAAA,QAAQ,GAAGxP,MAAM,CAACiI,iBAAP,CAAyBuH,QAAzB,CAAX;AACA,cAAIqF,YAAY,GAAGhW,SAAnB;;AACA,cAAI2Q,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAAhC,IAA4CA,QAAQ,CAACsF,cAAT,CAAwB,SAAxB,CAAhD,EAAoF;AAChF/M,YAAAA,KAAK,CAACgN,iBAAN,CAAwBvF,QAAxB;;AACAqF,YAAAA,YAAY,GAAG,IAAInV,GAAG,CAACsV,YAAR,CAAqBxF,QAAQ,CAACG,OAA9B,EAAuCH,QAAvC,CAAf;AACH,WAHD,MAIK,IAAIhC,WAAW,CAACgC,QAAD,CAAf,EAA2B;AAC5BqF,YAAAA,YAAY,GAAG,IAAInV,GAAG,CAACsV,YAAR,CAAqBxF,QAArB,EAA+B;AAAEoC,cAAAA,QAAQ,EAAEpC;AAAZ,aAA/B,CAAf;AACH,WAFI,MAGA,IAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAC1BzH,YAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,6IAAnB,CAAnB;;AACA;AACH,WAHI,MAIA;AACD,gBAAIuK,aAAa,GAAGjO,SAAS,CACxBkO,MADe,CACR,UAAUC,KAAV,EAAiBC,YAAjB,EAA+BC,eAA/B,EAAgD;AACxD,kBAAIA,eAAe,GAAGT,WAAtB,EAAmC;AAC/BO,gBAAAA,KAAK,CAAC7Q,IAAN,CAAW,KAAK2F,aAAa,CAACmL,YAAD,CAA7B;AACH,eAFD,MAGK,IAAIC,eAAe,IAAIT,WAAvB,EAAoC;AACrCO,gBAAAA,KAAK,CAAC7Q,IAAN,CAAW,MAAM2F,aAAa,CAACmL,YAAD,CAAnB,GAAoC,GAA/C;AACH,eAFI,MAGA,IAAIC,eAAe,IAAIT,WAAW,GAAG,CAArC,EAAwC;AACzCO,gBAAAA,KAAK,CAAC7Q,IAAN,CAAW,KAAX;AACH;;AACD,qBAAO6Q,KAAP;AACH,aAZmB,EAYjB,EAZiB,EAafd,IAbe,CAaV,IAbU,CAApB;;AAcAtM,YAAAA,KAAK,CAACmB,YAAN,CAAmBlJ,MAAM,CAAC0K,WAAP,CAAmB,cAAcgK,SAAS,GACzDA,SADyD,GAEzD,UAFkC,IAEpB,4DAFoB,GAE2CO,aAF3C,GAE2D,GAF9E,CAAnB,EAEuGtT,IAFvG;;AAGA;AACH;;AACD,cAAIkT,YAAY,CAACrE,KAAb,KACAzI,KAAK,CAACjH,UAAN,CAAiBoD,wBAAjB,CAA0CrE,aAAa,CAACsE,WAAd,CAA0BmR,4BAApE,CADJ,EACuG;AACnGb,YAAAA,qBAAqB,CAACnQ,IAAtB,CAA2B9B,KAA3B,CAAiCiS,qBAAjC,EAAwDnV,OAAO,CAACiF,aAAR,CAAsB,EAAtB,EAA0BjF,OAAO,CAACkF,MAAR,CAAeuD,KAAK,CAACwN,+BAAN,CAAsCV,YAAtC,EAAoDlT,IAApD,CAAf,CAA1B,CAAxD;AACH,WAHD,MAIK;AACDgT,YAAAA,gBAAgB,CAACrQ,IAAjB,CAAsByD,KAAK,CAACyN,mBAAN,CAA0BX,YAA1B,CAAtB;AACH;AACJ;AACJ,OA9CD;AA+CA,aAAOF,gBAAP;AACH,KAnDD;;AAoDAxV,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCuT,iBAAlC,GAAsD,UAAUvF,QAAV,EAAoB;AACtE,UAAIA,QAAQ,CAACsF,cAAT,CAAwB,UAAxB,KAAuCtF,QAAQ,CAACoC,QAAT,IAAqB,IAAhE,EAAsE;AAClE,aAAK1I,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,0BAA0BT,aAAa,CAACuF,QAAQ,CAACG,OAAV,CAAvC,GAA4D,uBAA5D,GAAsFH,QAAQ,CAACoC,QAA/F,GAA0G,4NAA7H,CAAlB;AACH;AACJ,KAJD;;AAKAzS,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC+T,+BAAlC,GAAoE,UAAU/F,QAAV,EAAoB7N,IAApB,EAA0B;AAC1F,UAAIoG,KAAK,GAAG,IAAZ;;AACA,UAAI0N,UAAU,GAAG,EAAjB;AACA,UAAIC,oBAAoB,GAAG,EAA3B;;AACA,UAAIlG,QAAQ,CAACsC,UAAT,IAAuBtC,QAAQ,CAACqC,WAAhC,IAA+CrC,QAAQ,CAACoC,QAA5D,EAAsE;AAClE,aAAK1I,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,gEAAnB,CAAlB,EAAwG/I,IAAxG;;AACA,eAAO,EAAP;AACH;;AACD,UAAI,CAAC6N,QAAQ,CAACmG,KAAd,EAAqB;AACjB,aAAKzM,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,sEAAnB,CAAlB,EAA8G/I,IAA9G;;AACA,eAAO,EAAP;AACH;;AACDiU,MAAAA,kBAAkB,CAACpG,QAAQ,CAACmC,QAAV,EAAoB+D,oBAApB,CAAlB;AACAA,MAAAA,oBAAoB,CAACzJ,OAArB,CAA6B,UAAU+F,UAAV,EAAsB;AAC/C,YAAI3B,KAAK,GAAGtI,KAAK,CAACqC,0BAAN,CAAiC4H,UAAU,CAACxO,SAA5C,EAAuD,KAAvD,CAAZ;;AACA,YAAI6M,KAAJ,EAAW;AACPoF,UAAAA,UAAU,CAACnR,IAAX,CAAgB+L,KAAhB;AACH;AACJ,OALD;AAMA,aAAOoF,UAAP;AACH,KApBD;;AAqBAtW,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC4I,0BAAlC,GAA+D,UAAUtH,OAAV,EAAmB+I,eAAnB,EAAoC;AAC/F,UAAIA,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,QAAAA,eAAe,GAAG,IAAlB;AAAyB;;AAC3D,UAAIjK,OAAO,GAAG,KAAKsG,iCAAL,CAAuCpF,OAAvC,CAAd;;AACA,UAAIlB,OAAO,IAAIA,OAAO,CAACwG,QAAR,CAAiBrB,WAAhC,EAA6C;AACzC,eAAO;AAAE+B,UAAAA,aAAa,EAAEhG,OAAjB;AAA0B4E,UAAAA,gBAAgB,EAAE9F,OAAO,CAACwG,QAAR,CAAiBV;AAA7D,SAAP;AACH;;AACD,UAAIkD,UAAU,GAAG,KAAKnG,YAAL,CAAkB3B,OAAlB,EAA2BpD,GAAG,CAACmL,kBAAJ,CAAuBC,SAAlD,CAAjB;;AACA,UAAIF,UAAU,IAAIA,UAAU,CAAC7D,WAA7B,EAA0C;AACtC,eAAO;AAAE+B,UAAAA,aAAa,EAAEhG,OAAjB;AAA0B4E,UAAAA,gBAAgB,EAAEkD,UAAU,CAAClD;AAAvD,SAAP;AACH;;AACD,UAAImE,eAAJ,EAAqB;AACjB,cAAM7L,MAAM,CAAC0K,WAAP,CAAmB5H,OAAO,CAACX,IAAR,GAAe,wCAAlC,CAAN;AACH;;AACD,aAAO,IAAP;AACH,KAdD;;AAeAhD,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCqU,0BAAlC,GAA+D,UAAUlU,IAAV,EAAgByP,YAAhB,EAA8B;AACzF,UAAIA,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,QAAAA,YAAY,GAAG,IAAf;AAAsB;;AACrD,UAAIzM,WAAW,GAAG,KAAKF,YAAL,CAAkB9C,IAAlB,EAAwBjC,GAAG,CAACmL,kBAAJ,CAAuBqG,UAA/C,CAAlB;;AACA,UAAIvM,WAAJ,EAAiB;AACb,eAAOA,WAAW,CAAChD,IAAnB;AACH;;AACD,aAAO,KAAK6I,gBAAL,CAAsB7I,IAAtB,EAA4ByP,YAA5B,CAAP;AACH,KAPD;;AAQAjS,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkCgU,mBAAlC,GAAwD,UAAUhG,QAAV,EAAoB;AACxE,UAAIsG,WAAW,GAAGjX,SAAlB;AACA,UAAIkX,mBAAmB,GAAG,IAA1B;AACA,UAAIC,sBAAsB,GAAG,IAA7B;;AACA,UAAIxF,KAAK,GAAG,KAAK0D,iBAAL,CAAuB1E,QAAQ,CAACgB,KAAhC,CAAZ;;AACA,UAAIhB,QAAQ,CAACoC,QAAb,EAAuB;AACnBmE,QAAAA,mBAAmB,GACf,KAAKF,0BAAL,CAAgCrG,QAAQ,CAACoC,QAAzC,EAAmDpC,QAAQ,CAAC4B,YAA5D,CADJ;AAEA0E,QAAAA,WAAW,GAAGC,mBAAmB,CAAClQ,MAAlC;;AACA,YAAI2J,QAAQ,CAACgB,KAAT,KAAmBhB,QAAQ,CAACoC,QAAhC,EAA0C;AACtC;AACApB,UAAAA,KAAK,GAAG;AAAEwB,YAAAA,UAAU,EAAE+D;AAAd,WAAR;AACH;AACJ,OARD,MASK,IAAIvG,QAAQ,CAACsC,UAAb,EAAyB;AAC1BkE,QAAAA,sBAAsB,GAAG,KAAK7D,mBAAL,CAAyB3C,QAAQ,CAACsC,UAAlC,EAA8CtC,QAAQ,CAAC4B,YAAvD,CAAzB;AACA0E,QAAAA,WAAW,GAAGE,sBAAsB,CAACnQ,MAArC;AACH;;AACD,aAAO;AACH2K,QAAAA,KAAK,EAAEA,KADJ;AAEHoB,QAAAA,QAAQ,EAAEmE,mBAFP;AAGHpE,QAAAA,QAAQ,EAAEnC,QAAQ,CAACmC,QAHhB;AAIHG,QAAAA,UAAU,EAAEkE,sBAJT;AAKHnE,QAAAA,WAAW,EAAErC,QAAQ,CAACqC,WAAT,GAAuB,KAAKqC,iBAAL,CAAuB1E,QAAQ,CAACqC,WAAhC,CAAvB,GAAsEhT,SALhF;AAMHkT,QAAAA,IAAI,EAAE+D,WANH;AAOHH,QAAAA,KAAK,EAAEnG,QAAQ,CAACmG;AAPb,OAAP;AASH,KA3BD;;AA4BAxW,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC+I,mBAAlC,GAAwD,UAAUrD,OAAV,EAAmB+O,WAAnB,EAAgCpO,aAAhC,EAA+C;AACnG,UAAIE,KAAK,GAAG,IAAZ;;AACA,UAAImO,GAAG,GAAG,EAAV;AACAlX,MAAAA,MAAM,CAACmX,IAAP,CAAYjP,OAAZ,EAAqB+E,OAArB,CAA6B,UAAUmK,YAAV,EAAwB;AACjD,YAAIC,KAAK,GAAGnP,OAAO,CAACkP,YAAD,CAAnB;;AACA,YAAIC,KAAK,CAACJ,WAAN,KAAsBA,WAA1B,EAAuC;AACnCC,UAAAA,GAAG,CAAC5R,IAAJ,CAASyD,KAAK,CAACuO,iBAAN,CAAwBD,KAAxB,EAA+BD,YAA/B,EAA6CvO,aAA7C,CAAT;AACH;AACJ,OALD;AAMA,aAAOqO,GAAP;AACH,KAVD;;AAWA/W,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC+U,iBAAlC,GAAsD,UAAU3S,QAAV,EAAoB;AACtE,aAAOA,QAAQ,CAAC4S,KAAT,CAAe,SAAf,CAAP;AACH,KAFD;;AAGArX,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC8U,iBAAlC,GAAsD,UAAUG,CAAV,EAAaL,YAAb,EAA2BvD,UAA3B,EAAuC;AACzF,UAAI9K,KAAK,GAAG,IAAZ;;AACA,UAAI2O,SAAJ;;AACA,UAAI,OAAOD,CAAC,CAAC7S,QAAT,KAAsB,QAA1B,EAAoC;AAChC8S,QAAAA,SAAS,GACL,KAAKH,iBAAL,CAAuBE,CAAC,CAAC7S,QAAzB,EAAmCuG,GAAnC,CAAuC,UAAUwM,OAAV,EAAmB;AAAE,iBAAO5O,KAAK,CAACmM,iBAAN,CAAwByC,OAAxB,CAAP;AAA0C,SAAtG,CADJ;AAEH,OAHD,MAIK;AACD,YAAI,CAACF,CAAC,CAAC7S,QAAP,EAAiB;AACb,eAAKsF,YAAL,CAAkBlJ,MAAM,CAAC0K,WAAP,CAAmB,gDAAgD0L,YAAhD,GAA+D,UAA/D,GAA4EnM,aAAa,CAAC4I,UAAD,CAAzF,GAAwG,6CAA3H,CAAlB,EAA6LA,UAA7L;;AACA6D,UAAAA,SAAS,GAAG,EAAZ;AACH,SAHD,MAIK;AACDA,UAAAA,SAAS,GAAG,CAAC,KAAKxC,iBAAL,CAAuBuC,CAAC,CAAC7S,QAAzB,CAAD,CAAZ;AACH;AACJ;;AACD,aAAO;AACH8S,QAAAA,SAAS,EAAEA,SADR;AAEHE,QAAAA,KAAK,EAAEH,CAAC,CAACG,KAFN;AAGHC,QAAAA,WAAW,EAAEJ,CAAC,CAACI,WAHZ;AAIHC,QAAAA,uBAAuB,EAAEL,CAAC,CAACK,uBAJxB;AAKHV,QAAAA,YAAY,EAAEA,YALX;AAMHW,QAAAA,IAAI,EAAEN,CAAC,CAACM,IAAF,GAAS,KAAK7C,iBAAL,CAAuBuC,CAAC,CAACM,IAAzB,CAAT,GAA0C,IAN7C;AAOHC,QAAAA,MAAM,EAAEP,CAAC,CAACO;AAPP,OAAP;AASH,KAzBD;;AA0BA7X,IAAAA,uBAAuB,CAACqC,SAAxB,CAAkC0H,YAAlC,GAAiD,UAAUhJ,KAAV,EAAiByB,IAAjB,EAAuBsV,SAAvB,EAAkC;AAC/E,UAAI,KAAKlW,eAAT,EAA0B;AACtB,aAAKA,eAAL,CAAqBb,KAArB,EAA4ByB,IAA5B;;AACA,YAAIsV,SAAJ,EAAe;AACX,eAAKlW,eAAL,CAAqBb,KAArB,EAA4B+W,SAA5B;AACH;AACJ,OALD,MAMK;AACD,cAAM/W,KAAN;AACH;AACJ,KAVD;;AAWA,WAAOf,uBAAP;AACH,GA1/B4C,EAA7C;;AA2/BAT,EAAAA,OAAO,CAACS,uBAAR,GAAkCA,uBAAlC;;AACA,WAAS+X,YAAT,CAAsBC,IAAtB,EAA4BC,GAA5B,EAAiC;AAC7B,QAAIA,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAAEA,MAAAA,GAAG,GAAG,EAAN;AAAW;;AACjC,QAAID,IAAJ,EAAU;AACN,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAAC3F,MAAzB,EAAiC6F,CAAC,EAAlC,EAAsC;AAClC,YAAIC,IAAI,GAAGtX,MAAM,CAACiI,iBAAP,CAAyBkP,IAAI,CAACE,CAAD,CAA7B,CAAX;;AACA,YAAI9D,KAAK,CAACC,OAAN,CAAc8D,IAAd,CAAJ,EAAyB;AACrBJ,UAAAA,YAAY,CAACI,IAAD,EAAOF,GAAP,CAAZ;AACH,SAFD,MAGK;AACDA,UAAAA,GAAG,CAAC9S,IAAJ,CAASgT,IAAT;AACH;AACJ;AACJ;;AACD,WAAOF,GAAP;AACH;;AACD,WAASG,WAAT,CAAqBC,KAArB,EAA4B;AACxB,QAAIA,KAAJ,EAAW;AACP,aAAOjE,KAAK,CAACkE,IAAN,CAAW,IAAI9J,GAAJ,CAAQ6J,KAAR,CAAX,CAAP;AACH;;AACD,WAAO,EAAP;AACH;;AACD,WAAStN,qBAAT,CAA+BiN,IAA/B,EAAqC;AACjC,WAAOI,WAAW,CAACL,YAAY,CAACC,IAAD,CAAb,CAAlB;AACH;;AACD,WAAS3J,WAAT,CAAqBtO,KAArB,EAA4B;AACxB,WAAQA,KAAK,YAAYK,eAAe,CAACwD,YAAlC,IAAoD7D,KAAK,YAAYS,MAAM,CAAC+X,IAAnF;AACH;;AACD,WAAS9B,kBAAT,CAA4B1W,KAA5B,EAAmCyY,iBAAnC,EAAsD;AAClD3X,IAAAA,MAAM,CAAC4X,UAAP,CAAkB1Y,KAAlB,EAAyB,IAAI2Y,sBAAJ,EAAzB,EAAuDF,iBAAvD;AACH;;AACD,MAAIE,sBAAsB;AAAG;AAAe,YAAUC,MAAV,EAAkB;AAC1DxY,IAAAA,OAAO,CAACyY,SAAR,CAAkBF,sBAAlB,EAA0CC,MAA1C;;AACA,aAASD,sBAAT,GAAkC;AAC9B,aAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACtV,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDoV,IAAAA,sBAAsB,CAACrW,SAAvB,CAAiCwW,UAAjC,GAA8C,UAAU9Y,KAAV,EAAiByY,iBAAjB,EAAoC;AAC9EA,MAAAA,iBAAiB,CAACrT,IAAlB,CAAuB;AAAEd,QAAAA,SAAS,EAAEtE;AAAb,OAAvB;AACH,KAFD;;AAGA,WAAO2Y,sBAAP;AACH,GAT2C,CAS1C7X,MAAM,CAACiY,gBATmC,CAA5C;;AAUA,WAAShO,aAAT,CAAuBtI,IAAvB,EAA6B;AACzB,QAAIA,IAAI,YAAYpC,eAAe,CAACwD,YAApC,EAAkD;AAC9C,aAAOpB,IAAI,CAACQ,IAAL,GAAY,MAAZ,GAAqBR,IAAI,CAACsB,QAAjC;AACH,KAFD,MAGK;AACD,aAAOjD,MAAM,CAACuC,SAAP,CAAiBZ,IAAjB,CAAP;AACH;AACJ;AACD;AACJ;AACA;;;AACI,WAASwH,0BAAT,CAAoC+O,QAApC,EAA8C;AAC1C,QAAIhY,KAAK,GAAGoC,KAAK,CAAC,oCAAoCtC,MAAM,CAACuC,SAAP,CAAiB2V,QAAjB,CAApC,GAAiE,yBAAlE,CAAjB;AACAhY,IAAAA,KAAK,CAACxB,OAAO,CAACW,oBAAT,CAAL,GAAsC6Y,QAAtC;AACA,WAAOhY,KAAP;AACH;AACJ,CAzlCD,E,CA0lCA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define(\"@angular/compiler/src/metadata_resolver\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/aot/static_symbol\", \"@angular/compiler/src/aot/util\", \"@angular/compiler/src/assertions\", \"@angular/compiler/src/compile_metadata\", \"@angular/compiler/src/core\", \"@angular/compiler/src/directive_resolver\", \"@angular/compiler/src/identifiers\", \"@angular/compiler/src/lifecycle_reflector\", \"@angular/compiler/src/selector\", \"@angular/compiler/src/util\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.CompileMetadataResolver = exports.getMissingNgModuleMetadataErrorData = exports.ERROR_COMPONENT_TYPE = void 0;\n    var tslib_1 = require(\"tslib\");\n    var static_symbol_1 = require(\"@angular/compiler/src/aot/static_symbol\");\n    var util_1 = require(\"@angular/compiler/src/aot/util\");\n    var assertions_1 = require(\"@angular/compiler/src/assertions\");\n    var cpl = require(\"@angular/compiler/src/compile_metadata\");\n    var core_1 = require(\"@angular/compiler/src/core\");\n    var directive_resolver_1 = require(\"@angular/compiler/src/directive_resolver\");\n    var identifiers_1 = require(\"@angular/compiler/src/identifiers\");\n    var lifecycle_reflector_1 = require(\"@angular/compiler/src/lifecycle_reflector\");\n    var selector_1 = require(\"@angular/compiler/src/selector\");\n    var util_2 = require(\"@angular/compiler/src/util\");\n    exports.ERROR_COMPONENT_TYPE = 'ngComponentType';\n    var MISSING_NG_MODULE_METADATA_ERROR_DATA = 'ngMissingNgModuleMetadataErrorData';\n    function getMissingNgModuleMetadataErrorData(error) {\n        var _a;\n        return (_a = error[MISSING_NG_MODULE_METADATA_ERROR_DATA]) !== null && _a !== void 0 ? _a : null;\n    }\n    exports.getMissingNgModuleMetadataErrorData = getMissingNgModuleMetadataErrorData;\n    // Design notes:\n    // - don't lazily create metadata:\n    //   For some metadata, we need to do async work sometimes,\n    //   so the user has to kick off this loading.\n    //   But we want to report errors even when the async work is\n    //   not required to check that the user would have been able\n    //   to wait correctly.\n    var CompileMetadataResolver = /** @class */ (function () {\n        function CompileMetadataResolver(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {\n            this._config = _config;\n            this._htmlParser = _htmlParser;\n            this._ngModuleResolver = _ngModuleResolver;\n            this._directiveResolver = _directiveResolver;\n            this._pipeResolver = _pipeResolver;\n            this._summaryResolver = _summaryResolver;\n            this._schemaRegistry = _schemaRegistry;\n            this._directiveNormalizer = _directiveNormalizer;\n            this._console = _console;\n            this._staticSymbolCache = _staticSymbolCache;\n            this._reflector = _reflector;\n            this._errorCollector = _errorCollector;\n            this._nonNormalizedDirectiveCache = new Map();\n            this._directiveCache = new Map();\n            this._summaryCache = new Map();\n            this._pipeCache = new Map();\n            this._ngModuleCache = new Map();\n            this._ngModuleOfTypes = new Map();\n            this._shallowModuleCache = new Map();\n        }\n        CompileMetadataResolver.prototype.getReflector = function () {\n            return this._reflector;\n        };\n        CompileMetadataResolver.prototype.clearCacheFor = function (type) {\n            var dirMeta = this._directiveCache.get(type);\n            this._directiveCache.delete(type);\n            this._nonNormalizedDirectiveCache.delete(type);\n            this._summaryCache.delete(type);\n            this._pipeCache.delete(type);\n            this._ngModuleOfTypes.delete(type);\n            // Clear all of the NgModule as they contain transitive information!\n            this._ngModuleCache.clear();\n            if (dirMeta) {\n                this._directiveNormalizer.clearCacheFor(dirMeta);\n            }\n        };\n        CompileMetadataResolver.prototype.clearCache = function () {\n            this._directiveCache.clear();\n            this._nonNormalizedDirectiveCache.clear();\n            this._summaryCache.clear();\n            this._pipeCache.clear();\n            this._ngModuleCache.clear();\n            this._ngModuleOfTypes.clear();\n            this._directiveNormalizer.clearCache();\n        };\n        CompileMetadataResolver.prototype._createProxyClass = function (baseType, name) {\n            var delegate = null;\n            var proxyClass = function () {\n                if (!delegate) {\n                    throw new Error(\"Illegal state: Class \" + name + \" for type \" + util_2.stringify(baseType) + \" is not compiled yet!\");\n                }\n                return delegate.apply(this, arguments);\n            };\n            proxyClass.setDelegate = function (d) {\n                delegate = d;\n                proxyClass.prototype = d.prototype;\n            };\n            // Make stringify work correctly\n            proxyClass.overriddenName = name;\n            return proxyClass;\n        };\n        CompileMetadataResolver.prototype.getGeneratedClass = function (dirType, name) {\n            if (dirType instanceof static_symbol_1.StaticSymbol) {\n                return this._staticSymbolCache.get(util_1.ngfactoryFilePath(dirType.filePath), name);\n            }\n            else {\n                return this._createProxyClass(dirType, name);\n            }\n        };\n        CompileMetadataResolver.prototype.getComponentViewClass = function (dirType) {\n            return this.getGeneratedClass(dirType, cpl.viewClassName(dirType, 0));\n        };\n        CompileMetadataResolver.prototype.getHostComponentViewClass = function (dirType) {\n            return this.getGeneratedClass(dirType, cpl.hostViewClassName(dirType));\n        };\n        CompileMetadataResolver.prototype.getHostComponentType = function (dirType) {\n            var name = cpl.identifierName({ reference: dirType }) + \"_Host\";\n            if (dirType instanceof static_symbol_1.StaticSymbol) {\n                return this._staticSymbolCache.get(dirType.filePath, name);\n            }\n            return this._createProxyClass(dirType, name);\n        };\n        CompileMetadataResolver.prototype.getRendererType = function (dirType) {\n            if (dirType instanceof static_symbol_1.StaticSymbol) {\n                return this._staticSymbolCache.get(util_1.ngfactoryFilePath(dirType.filePath), cpl.rendererTypeName(dirType));\n            }\n            else {\n                // returning an object as proxy,\n                // that we fill later during runtime compilation.\n                return {};\n            }\n        };\n        CompileMetadataResolver.prototype.getComponentFactory = function (selector, dirType, inputs, outputs) {\n            if (dirType instanceof static_symbol_1.StaticSymbol) {\n                return this._staticSymbolCache.get(util_1.ngfactoryFilePath(dirType.filePath), cpl.componentFactoryName(dirType));\n            }\n            else {\n                var hostView = this.getHostComponentViewClass(dirType);\n                // Note: ngContentSelectors will be filled later once the template is\n                // loaded.\n                var createComponentFactory = this._reflector.resolveExternalReference(identifiers_1.Identifiers.createComponentFactory);\n                return createComponentFactory(selector, dirType, hostView, inputs, outputs, []);\n            }\n        };\n        CompileMetadataResolver.prototype.initComponentFactory = function (factory, ngContentSelectors) {\n            var _a;\n            if (!(factory instanceof static_symbol_1.StaticSymbol)) {\n                (_a = factory.ngContentSelectors).push.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(ngContentSelectors)));\n            }\n        };\n        CompileMetadataResolver.prototype._loadSummary = function (type, kind) {\n            var typeSummary = this._summaryCache.get(type);\n            if (!typeSummary) {\n                var summary = this._summaryResolver.resolveSummary(type);\n                typeSummary = summary ? summary.type : null;\n                this._summaryCache.set(type, typeSummary || null);\n            }\n            return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n        };\n        CompileMetadataResolver.prototype.getHostComponentMetadata = function (compMeta, hostViewType) {\n            var hostType = this.getHostComponentType(compMeta.type.reference);\n            if (!hostViewType) {\n                hostViewType = this.getHostComponentViewClass(hostType);\n            }\n            // Note: ! is ok here as this method should only be called with normalized directive\n            // metadata, which always fills in the selector.\n            var template = selector_1.CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();\n            var templateUrl = '';\n            var htmlAst = this._htmlParser.parse(template, templateUrl);\n            return cpl.CompileDirectiveMetadata.create({\n                isHost: true,\n                type: { reference: hostType, diDeps: [], lifecycleHooks: [] },\n                template: new cpl.CompileTemplateMetadata({\n                    encapsulation: core_1.ViewEncapsulation.None,\n                    template: template,\n                    templateUrl: templateUrl,\n                    htmlAst: htmlAst,\n                    styles: [],\n                    styleUrls: [],\n                    ngContentSelectors: [],\n                    animations: [],\n                    isInline: true,\n                    externalStylesheets: [],\n                    interpolation: null,\n                    preserveWhitespaces: false,\n                }),\n                exportAs: null,\n                changeDetection: core_1.ChangeDetectionStrategy.Default,\n                inputs: [],\n                outputs: [],\n                host: {},\n                isComponent: true,\n                selector: '*',\n                providers: [],\n                viewProviders: [],\n                queries: [],\n                guards: {},\n                viewQueries: [],\n                componentViewType: hostViewType,\n                rendererType: { id: '__Host__', encapsulation: core_1.ViewEncapsulation.None, styles: [], data: {} },\n                entryComponents: [],\n                componentFactory: null\n            });\n        };\n        CompileMetadataResolver.prototype.loadDirectiveMetadata = function (ngModuleType, directiveType, isSync) {\n            var _this = this;\n            if (this._directiveCache.has(directiveType)) {\n                return null;\n            }\n            directiveType = util_2.resolveForwardRef(directiveType);\n            var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata;\n            var createDirectiveMetadata = function (templateMetadata) {\n                var normalizedDirMeta = new cpl.CompileDirectiveMetadata({\n                    isHost: false,\n                    type: metadata.type,\n                    isComponent: metadata.isComponent,\n                    selector: metadata.selector,\n                    exportAs: metadata.exportAs,\n                    changeDetection: metadata.changeDetection,\n                    inputs: metadata.inputs,\n                    outputs: metadata.outputs,\n                    hostListeners: metadata.hostListeners,\n                    hostProperties: metadata.hostProperties,\n                    hostAttributes: metadata.hostAttributes,\n                    providers: metadata.providers,\n                    viewProviders: metadata.viewProviders,\n                    queries: metadata.queries,\n                    guards: metadata.guards,\n                    viewQueries: metadata.viewQueries,\n                    entryComponents: metadata.entryComponents,\n                    componentViewType: metadata.componentViewType,\n                    rendererType: metadata.rendererType,\n                    componentFactory: metadata.componentFactory,\n                    template: templateMetadata\n                });\n                if (templateMetadata) {\n                    _this.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors);\n                }\n                _this._directiveCache.set(directiveType, normalizedDirMeta);\n                _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n                return null;\n            };\n            if (metadata.isComponent) {\n                var template = metadata.template;\n                var templateMeta = this._directiveNormalizer.normalizeTemplate({\n                    ngModuleType: ngModuleType,\n                    componentType: directiveType,\n                    moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\n                    encapsulation: template.encapsulation,\n                    template: template.template,\n                    templateUrl: template.templateUrl,\n                    styles: template.styles,\n                    styleUrls: template.styleUrls,\n                    animations: template.animations,\n                    interpolation: template.interpolation,\n                    preserveWhitespaces: template.preserveWhitespaces\n                });\n                if (util_2.isPromise(templateMeta) && isSync) {\n                    this._reportError(componentStillLoadingError(directiveType), directiveType);\n                    return null;\n                }\n                return util_2.SyncAsync.then(templateMeta, createDirectiveMetadata);\n            }\n            else {\n                // directive\n                createDirectiveMetadata(null);\n                return null;\n            }\n        };\n        CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {\n            var _this = this;\n            directiveType = util_2.resolveForwardRef(directiveType);\n            if (!directiveType) {\n                return null;\n            }\n            var cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n            if (cacheEntry) {\n                return cacheEntry;\n            }\n            var dirMeta = this._directiveResolver.resolve(directiveType, false);\n            if (!dirMeta) {\n                return null;\n            }\n            var nonNormalizedTemplateMetadata = undefined;\n            if (core_1.createComponent.isTypeOf(dirMeta)) {\n                // component\n                var compMeta = dirMeta;\n                assertions_1.assertArrayOfStrings('styles', compMeta.styles);\n                assertions_1.assertArrayOfStrings('styleUrls', compMeta.styleUrls);\n                assertions_1.assertInterpolationSymbols('interpolation', compMeta.interpolation);\n                var animations = compMeta.animations;\n                nonNormalizedTemplateMetadata = new cpl.CompileTemplateMetadata({\n                    encapsulation: util_2.noUndefined(compMeta.encapsulation),\n                    template: util_2.noUndefined(compMeta.template),\n                    templateUrl: util_2.noUndefined(compMeta.templateUrl),\n                    htmlAst: null,\n                    styles: compMeta.styles || [],\n                    styleUrls: compMeta.styleUrls || [],\n                    animations: animations || [],\n                    interpolation: util_2.noUndefined(compMeta.interpolation),\n                    isInline: !!compMeta.template,\n                    externalStylesheets: [],\n                    ngContentSelectors: [],\n                    preserveWhitespaces: util_2.noUndefined(dirMeta.preserveWhitespaces),\n                });\n            }\n            var changeDetectionStrategy = null;\n            var viewProviders = [];\n            var entryComponentMetadata = [];\n            var selector = dirMeta.selector;\n            if (core_1.createComponent.isTypeOf(dirMeta)) {\n                // Component\n                var compMeta = dirMeta;\n                changeDetectionStrategy = compMeta.changeDetection;\n                if (compMeta.viewProviders) {\n                    viewProviders = this._getProvidersMetadata(compMeta.viewProviders, entryComponentMetadata, \"viewProviders for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n                }\n                if (compMeta.entryComponents) {\n                    entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents)\n                        .map(function (type) { return _this._getEntryComponentMetadata(type); })\n                        .concat(entryComponentMetadata);\n                }\n                if (!selector) {\n                    selector = this._schemaRegistry.getDefaultComponentElementName();\n                }\n            }\n            else {\n                // Directive\n                if (!selector) {\n                    selector = null;\n                }\n            }\n            var providers = [];\n            if (dirMeta.providers != null) {\n                providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, \"providers for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n            }\n            var queries = [];\n            var viewQueries = [];\n            if (dirMeta.queries != null) {\n                queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n                viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n            }\n            var metadata = cpl.CompileDirectiveMetadata.create({\n                isHost: false,\n                selector: selector,\n                exportAs: util_2.noUndefined(dirMeta.exportAs),\n                isComponent: !!nonNormalizedTemplateMetadata,\n                type: this._getTypeMetadata(directiveType),\n                template: nonNormalizedTemplateMetadata,\n                changeDetection: changeDetectionStrategy,\n                inputs: dirMeta.inputs || [],\n                outputs: dirMeta.outputs || [],\n                host: dirMeta.host || {},\n                providers: providers || [],\n                viewProviders: viewProviders || [],\n                queries: queries || [],\n                guards: dirMeta.guards || {},\n                viewQueries: viewQueries || [],\n                entryComponents: entryComponentMetadata,\n                componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :\n                    null,\n                rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\n                componentFactory: null\n            });\n            if (nonNormalizedTemplateMetadata) {\n                metadata.componentFactory =\n                    this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\n            }\n            cacheEntry = { metadata: metadata, annotation: dirMeta };\n            this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n            return cacheEntry;\n        };\n        /**\n         * Gets the metadata for the given directive.\n         * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n         */\n        CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {\n            var dirMeta = this._directiveCache.get(directiveType);\n            if (!dirMeta) {\n                this._reportError(util_2.syntaxError(\"Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive \" + stringifyType(directiveType) + \".\"), directiveType);\n            }\n            return dirMeta;\n        };\n        CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {\n            var dirSummary = this._loadSummary(dirType, cpl.CompileSummaryKind.Directive);\n            if (!dirSummary) {\n                this._reportError(util_2.syntaxError(\"Illegal state: Could not load the summary for directive \" + stringifyType(dirType) + \".\"), dirType);\n            }\n            return dirSummary;\n        };\n        CompileMetadataResolver.prototype.isDirective = function (type) {\n            return !!this._loadSummary(type, cpl.CompileSummaryKind.Directive) ||\n                this._directiveResolver.isDirective(type);\n        };\n        CompileMetadataResolver.prototype.isAbstractDirective = function (type) {\n            var summary = this._loadSummary(type, cpl.CompileSummaryKind.Directive);\n            if (summary && !summary.isComponent) {\n                return !summary.selector;\n            }\n            var meta = this._directiveResolver.resolve(type, false);\n            if (meta && !core_1.createComponent.isTypeOf(meta)) {\n                return !meta.selector;\n            }\n            return false;\n        };\n        CompileMetadataResolver.prototype.isPipe = function (type) {\n            return !!this._loadSummary(type, cpl.CompileSummaryKind.Pipe) ||\n                this._pipeResolver.isPipe(type);\n        };\n        CompileMetadataResolver.prototype.isNgModule = function (type) {\n            return !!this._loadSummary(type, cpl.CompileSummaryKind.NgModule) ||\n                this._ngModuleResolver.isNgModule(type);\n        };\n        CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType, alreadyCollecting) {\n            if (alreadyCollecting === void 0) { alreadyCollecting = null; }\n            var moduleSummary = this._loadSummary(moduleType, cpl.CompileSummaryKind.NgModule);\n            if (!moduleSummary) {\n                var moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\n                moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n                if (moduleSummary) {\n                    this._summaryCache.set(moduleType, moduleSummary);\n                }\n            }\n            return moduleSummary;\n        };\n        /**\n         * Loads the declared directives and pipes of an NgModule.\n         */\n        CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {\n            var _this = this;\n            if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n            var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n            var loading = [];\n            if (ngModule) {\n                ngModule.declaredDirectives.forEach(function (id) {\n                    var promise = _this.loadDirectiveMetadata(moduleType, id.reference, isSync);\n                    if (promise) {\n                        loading.push(promise);\n                    }\n                });\n                ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });\n            }\n            return Promise.all(loading);\n        };\n        CompileMetadataResolver.prototype.getShallowModuleMetadata = function (moduleType) {\n            var compileMeta = this._shallowModuleCache.get(moduleType);\n            if (compileMeta) {\n                return compileMeta;\n            }\n            var ngModuleMeta = directive_resolver_1.findLast(this._reflector.shallowAnnotations(moduleType), core_1.createNgModule.isTypeOf);\n            compileMeta = {\n                type: this._getTypeMetadata(moduleType),\n                rawExports: ngModuleMeta.exports,\n                rawImports: ngModuleMeta.imports,\n                rawProviders: ngModuleMeta.providers,\n            };\n            this._shallowModuleCache.set(moduleType, compileMeta);\n            return compileMeta;\n        };\n        CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound, alreadyCollecting) {\n            var _this = this;\n            if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n            if (alreadyCollecting === void 0) { alreadyCollecting = null; }\n            moduleType = util_2.resolveForwardRef(moduleType);\n            var compileMeta = this._ngModuleCache.get(moduleType);\n            if (compileMeta) {\n                return compileMeta;\n            }\n            var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n            if (!meta) {\n                return null;\n            }\n            var declaredDirectives = [];\n            var exportedNonModuleIdentifiers = [];\n            var declaredPipes = [];\n            var importedModules = [];\n            var exportedModules = [];\n            var providers = [];\n            var entryComponents = [];\n            var bootstrapComponents = [];\n            var schemas = [];\n            if (meta.imports) {\n                flattenAndDedupeArray(meta.imports).forEach(function (importedType) {\n                    var importedModuleType = undefined;\n                    if (isValidType(importedType)) {\n                        importedModuleType = importedType;\n                    }\n                    else if (importedType && importedType.ngModule) {\n                        var moduleWithProviders = importedType;\n                        importedModuleType = moduleWithProviders.ngModule;\n                        if (moduleWithProviders.providers) {\n                            providers.push.apply(providers, tslib_1.__spreadArray([], tslib_1.__read(_this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(importedModuleType) + \"'\", [], importedType))));\n                        }\n                    }\n                    if (importedModuleType) {\n                        if (_this._checkSelfImport(moduleType, importedModuleType))\n                            return;\n                        if (!alreadyCollecting)\n                            alreadyCollecting = new Set();\n                        if (alreadyCollecting.has(importedModuleType)) {\n                            _this._reportError(util_2.syntaxError(_this._getTypeDescriptor(importedModuleType) + \" '\" + stringifyType(importedType) + \"' is imported recursively by the module '\" + stringifyType(moduleType) + \"'.\"), moduleType);\n                            return;\n                        }\n                        alreadyCollecting.add(importedModuleType);\n                        var importedModuleSummary = _this.getNgModuleSummary(importedModuleType, alreadyCollecting);\n                        alreadyCollecting.delete(importedModuleType);\n                        if (!importedModuleSummary) {\n                            var err = util_2.syntaxError(\"Unexpected \" + _this._getTypeDescriptor(importedType) + \" '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'. Please add a @NgModule annotation.\");\n                            // If possible, record additional context for this error to enable more useful\n                            // diagnostics on the compiler side.\n                            if (importedType instanceof static_symbol_1.StaticSymbol) {\n                                err[MISSING_NG_MODULE_METADATA_ERROR_DATA] = {\n                                    fileName: importedType.filePath,\n                                    className: importedType.name,\n                                };\n                            }\n                            _this._reportError(err, moduleType);\n                            return;\n                        }\n                        importedModules.push(importedModuleSummary);\n                    }\n                    else {\n                        _this._reportError(util_2.syntaxError(\"Unexpected value '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                        return;\n                    }\n                });\n            }\n            if (meta.exports) {\n                flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {\n                    if (!isValidType(exportedType)) {\n                        _this._reportError(util_2.syntaxError(\"Unexpected value '\" + stringifyType(exportedType) + \"' exported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                        return;\n                    }\n                    if (!alreadyCollecting)\n                        alreadyCollecting = new Set();\n                    if (alreadyCollecting.has(exportedType)) {\n                        _this._reportError(util_2.syntaxError(_this._getTypeDescriptor(exportedType) + \" '\" + util_2.stringify(exportedType) + \"' is exported recursively by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                        return;\n                    }\n                    alreadyCollecting.add(exportedType);\n                    var exportedModuleSummary = _this.getNgModuleSummary(exportedType, alreadyCollecting);\n                    alreadyCollecting.delete(exportedType);\n                    if (exportedModuleSummary) {\n                        exportedModules.push(exportedModuleSummary);\n                    }\n                    else {\n                        exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));\n                    }\n                });\n            }\n            // Note: This will be modified later, so we rely on\n            // getting a new instance every time!\n            var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n            if (meta.declarations) {\n                flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {\n                    if (!isValidType(declaredType)) {\n                        _this._reportError(util_2.syntaxError(\"Unexpected value '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                        return;\n                    }\n                    var declaredIdentifier = _this._getIdentifierMetadata(declaredType);\n                    if (_this.isDirective(declaredType)) {\n                        if (_this.isAbstractDirective(declaredType)) {\n                            _this._reportError(util_2.syntaxError(\"Directive \" + stringifyType(declaredType) + \" has no selector, please add it!\"), declaredType);\n                        }\n                        transitiveModule.addDirective(declaredIdentifier);\n                        declaredDirectives.push(declaredIdentifier);\n                        _this._addTypeToModule(declaredType, moduleType);\n                    }\n                    else if (_this.isPipe(declaredType)) {\n                        transitiveModule.addPipe(declaredIdentifier);\n                        transitiveModule.pipes.push(declaredIdentifier);\n                        declaredPipes.push(declaredIdentifier);\n                        _this._addTypeToModule(declaredType, moduleType);\n                    }\n                    else {\n                        _this._reportError(util_2.syntaxError(\"Unexpected \" + _this._getTypeDescriptor(declaredType) + \" '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'. Please add a @Pipe/@Directive/@Component annotation.\"), moduleType);\n                        return;\n                    }\n                });\n            }\n            var exportedDirectives = [];\n            var exportedPipes = [];\n            exportedNonModuleIdentifiers.forEach(function (exportedId) {\n                if (transitiveModule.directivesSet.has(exportedId.reference)) {\n                    exportedDirectives.push(exportedId);\n                    transitiveModule.addExportedDirective(exportedId);\n                }\n                else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n                    exportedPipes.push(exportedId);\n                    transitiveModule.addExportedPipe(exportedId);\n                }\n                else {\n                    _this._reportError(util_2.syntaxError(\"Can't export \" + _this._getTypeDescriptor(exportedId.reference) + \" \" + stringifyType(exportedId.reference) + \" from \" + stringifyType(moduleType) + \" as it was neither declared nor imported!\"), moduleType);\n                    return;\n                }\n            });\n            // The providers of the module have to go last\n            // so that they overwrite any other provider we already added.\n            if (meta.providers) {\n                providers.push.apply(providers, tslib_1.__spreadArray([], tslib_1.__read(this._getProvidersMetadata(meta.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(moduleType) + \"'\", [], moduleType))));\n            }\n            if (meta.entryComponents) {\n                entryComponents.push.apply(entryComponents, tslib_1.__spreadArray([], tslib_1.__read(flattenAndDedupeArray(meta.entryComponents)\n                    .map(function (type) { return _this._getEntryComponentMetadata(type); }))));\n            }\n            if (meta.bootstrap) {\n                flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {\n                    if (!isValidType(type)) {\n                        _this._reportError(util_2.syntaxError(\"Unexpected value '\" + stringifyType(type) + \"' used in the bootstrap property of module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                        return;\n                    }\n                    bootstrapComponents.push(_this._getIdentifierMetadata(type));\n                });\n            }\n            entryComponents.push.apply(entryComponents, tslib_1.__spreadArray([], tslib_1.__read(bootstrapComponents.map(function (type) { return _this._getEntryComponentMetadata(type.reference); }))));\n            if (meta.schemas) {\n                schemas.push.apply(schemas, tslib_1.__spreadArray([], tslib_1.__read(flattenAndDedupeArray(meta.schemas))));\n            }\n            compileMeta = new cpl.CompileNgModuleMetadata({\n                type: this._getTypeMetadata(moduleType),\n                providers: providers,\n                entryComponents: entryComponents,\n                bootstrapComponents: bootstrapComponents,\n                schemas: schemas,\n                declaredDirectives: declaredDirectives,\n                exportedDirectives: exportedDirectives,\n                declaredPipes: declaredPipes,\n                exportedPipes: exportedPipes,\n                importedModules: importedModules,\n                exportedModules: exportedModules,\n                transitiveModule: transitiveModule,\n                id: meta.id || null,\n            });\n            entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });\n            providers.forEach(function (provider) { return transitiveModule.addProvider(provider, compileMeta.type); });\n            transitiveModule.addModule(compileMeta.type);\n            this._ngModuleCache.set(moduleType, compileMeta);\n            return compileMeta;\n        };\n        CompileMetadataResolver.prototype._checkSelfImport = function (moduleType, importedModuleType) {\n            if (moduleType === importedModuleType) {\n                this._reportError(util_2.syntaxError(\"'\" + stringifyType(moduleType) + \"' module can't import itself\"), moduleType);\n                return true;\n            }\n            return false;\n        };\n        CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {\n            if (isValidType(type)) {\n                if (this.isDirective(type)) {\n                    return 'directive';\n                }\n                if (this.isPipe(type)) {\n                    return 'pipe';\n                }\n                if (this.isNgModule(type)) {\n                    return 'module';\n                }\n            }\n            if (type.provide) {\n                return 'provider';\n            }\n            return 'value';\n        };\n        CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {\n            var oldModule = this._ngModuleOfTypes.get(type);\n            if (oldModule && oldModule !== moduleType) {\n                this._reportError(util_2.syntaxError(\"Type \" + stringifyType(type) + \" is part of the declarations of 2 modules: \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \"! \" +\n                    (\"Please consider moving \" + stringifyType(type) + \" to a higher module that imports \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \". \") +\n                    (\"You can also create a new NgModule that exports and includes \" + stringifyType(type) + \" then import that NgModule in \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \".\")), moduleType);\n                return;\n            }\n            this._ngModuleOfTypes.set(type, moduleType);\n        };\n        CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {\n            // collect `providers` / `entryComponents` from all imported and all exported modules\n            var result = new cpl.TransitiveCompileNgModuleMetadata();\n            var modulesByToken = new Map();\n            importedModules.concat(exportedModules).forEach(function (modSummary) {\n                modSummary.modules.forEach(function (mod) { return result.addModule(mod); });\n                modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });\n                var addedTokens = new Set();\n                modSummary.providers.forEach(function (entry) {\n                    var tokenRef = cpl.tokenReference(entry.provider.token);\n                    var prevModules = modulesByToken.get(tokenRef);\n                    if (!prevModules) {\n                        prevModules = new Set();\n                        modulesByToken.set(tokenRef, prevModules);\n                    }\n                    var moduleRef = entry.module.reference;\n                    // Note: the providers of one module may still contain multiple providers\n                    // per token (e.g. for multi providers), and we need to preserve these.\n                    if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n                        prevModules.add(moduleRef);\n                        addedTokens.add(tokenRef);\n                        result.addProvider(entry.provider, entry.module);\n                    }\n                });\n            });\n            exportedModules.forEach(function (modSummary) {\n                modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });\n                modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });\n            });\n            importedModules.forEach(function (modSummary) {\n                modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });\n                modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });\n            });\n            return result;\n        };\n        CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {\n            type = util_2.resolveForwardRef(type);\n            return { reference: type };\n        };\n        CompileMetadataResolver.prototype.isInjectable = function (type) {\n            var annotations = this._reflector.tryAnnotations(type);\n            return annotations.some(function (ann) { return core_1.createInjectable.isTypeOf(ann); });\n        };\n        CompileMetadataResolver.prototype.getInjectableSummary = function (type) {\n            return {\n                summaryKind: cpl.CompileSummaryKind.Injectable,\n                type: this._getTypeMetadata(type, null, false)\n            };\n        };\n        CompileMetadataResolver.prototype.getInjectableMetadata = function (type, dependencies, throwOnUnknownDeps) {\n            if (dependencies === void 0) { dependencies = null; }\n            if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n            var typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n            var typeMetadata = typeSummary ?\n                typeSummary.type :\n                this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);\n            var annotations = this._reflector.annotations(type).filter(function (ann) { return core_1.createInjectable.isTypeOf(ann); });\n            if (annotations.length === 0) {\n                return null;\n            }\n            var meta = annotations[annotations.length - 1];\n            return {\n                symbol: type,\n                type: typeMetadata,\n                providedIn: meta.providedIn,\n                useValue: meta.useValue,\n                useClass: meta.useClass,\n                useExisting: meta.useExisting,\n                useFactory: meta.useFactory,\n                deps: meta.deps,\n            };\n        };\n        CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies, throwOnUnknownDeps) {\n            if (dependencies === void 0) { dependencies = null; }\n            if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n            var identifier = this._getIdentifierMetadata(type);\n            return {\n                reference: identifier.reference,\n                diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\n                lifecycleHooks: lifecycle_reflector_1.getAllLifecycleHooks(this._reflector, identifier.reference),\n            };\n        };\n        CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {\n            if (dependencies === void 0) { dependencies = null; }\n            factory = util_2.resolveForwardRef(factory);\n            return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };\n        };\n        /**\n         * Gets the metadata for the given pipe.\n         * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n         */\n        CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {\n            var pipeMeta = this._pipeCache.get(pipeType);\n            if (!pipeMeta) {\n                this._reportError(util_2.syntaxError(\"Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n            }\n            return pipeMeta || null;\n        };\n        CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {\n            var pipeSummary = this._loadSummary(pipeType, cpl.CompileSummaryKind.Pipe);\n            if (!pipeSummary) {\n                this._reportError(util_2.syntaxError(\"Illegal state: Could not load the summary for pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n            }\n            return pipeSummary;\n        };\n        CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {\n            var pipeMeta = this._pipeCache.get(pipeType);\n            if (!pipeMeta) {\n                pipeMeta = this._loadPipeMetadata(pipeType);\n            }\n            return pipeMeta;\n        };\n        CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {\n            pipeType = util_2.resolveForwardRef(pipeType);\n            var pipeAnnotation = this._pipeResolver.resolve(pipeType);\n            var pipeMeta = new cpl.CompilePipeMetadata({\n                type: this._getTypeMetadata(pipeType),\n                name: pipeAnnotation.name,\n                pure: !!pipeAnnotation.pure\n            });\n            this._pipeCache.set(pipeType, pipeMeta);\n            this._summaryCache.set(pipeType, pipeMeta.toSummary());\n            return pipeMeta;\n        };\n        CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies, throwOnUnknownDeps) {\n            var _this = this;\n            if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n            var hasUnknownDeps = false;\n            var params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n            var dependenciesMetadata = params.map(function (param) {\n                var isAttribute = false;\n                var isHost = false;\n                var isSelf = false;\n                var isSkipSelf = false;\n                var isOptional = false;\n                var token = null;\n                if (Array.isArray(param)) {\n                    param.forEach(function (paramEntry) {\n                        if (core_1.createHost.isTypeOf(paramEntry)) {\n                            isHost = true;\n                        }\n                        else if (core_1.createSelf.isTypeOf(paramEntry)) {\n                            isSelf = true;\n                        }\n                        else if (core_1.createSkipSelf.isTypeOf(paramEntry)) {\n                            isSkipSelf = true;\n                        }\n                        else if (core_1.createOptional.isTypeOf(paramEntry)) {\n                            isOptional = true;\n                        }\n                        else if (core_1.createAttribute.isTypeOf(paramEntry)) {\n                            isAttribute = true;\n                            token = paramEntry.attributeName;\n                        }\n                        else if (core_1.createInject.isTypeOf(paramEntry)) {\n                            token = paramEntry.token;\n                        }\n                        else if (core_1.createInjectionToken.isTypeOf(paramEntry) ||\n                            paramEntry instanceof static_symbol_1.StaticSymbol) {\n                            token = paramEntry;\n                        }\n                        else if (isValidType(paramEntry) && token == null) {\n                            token = paramEntry;\n                        }\n                    });\n                }\n                else {\n                    token = param;\n                }\n                if (token == null) {\n                    hasUnknownDeps = true;\n                    return {};\n                }\n                return {\n                    isAttribute: isAttribute,\n                    isHost: isHost,\n                    isSelf: isSelf,\n                    isSkipSelf: isSkipSelf,\n                    isOptional: isOptional,\n                    token: _this._getTokenMetadata(token)\n                };\n            });\n            if (hasUnknownDeps) {\n                var depsTokens = dependenciesMetadata.map(function (dep) { return dep.token ? stringifyType(dep.token) : '?'; }).join(', ');\n                var message = \"Can't resolve all parameters for \" + stringifyType(typeOrFunc) + \": (\" + depsTokens + \").\";\n                if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\n                    this._reportError(util_2.syntaxError(message), typeOrFunc);\n                }\n            }\n            return dependenciesMetadata;\n        };\n        CompileMetadataResolver.prototype._getTokenMetadata = function (token) {\n            token = util_2.resolveForwardRef(token);\n            var compileToken;\n            if (typeof token === 'string') {\n                compileToken = { value: token };\n            }\n            else {\n                compileToken = { identifier: { reference: token } };\n            }\n            return compileToken;\n        };\n        CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {\n            var _this = this;\n            if (compileProviders === void 0) { compileProviders = []; }\n            providers.forEach(function (provider, providerIdx) {\n                if (Array.isArray(provider)) {\n                    _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n                }\n                else {\n                    provider = util_2.resolveForwardRef(provider);\n                    var providerMeta = undefined;\n                    if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n                        _this._validateProvider(provider);\n                        providerMeta = new cpl.ProviderMeta(provider.provide, provider);\n                    }\n                    else if (isValidType(provider)) {\n                        providerMeta = new cpl.ProviderMeta(provider, { useClass: provider });\n                    }\n                    else if (provider === void 0) {\n                        _this._reportError(util_2.syntaxError(\"Encountered undefined provider! Usually this means you have a circular dependencies. This might be caused by using 'barrel' index.ts files.\"));\n                        return;\n                    }\n                    else {\n                        var providersInfo = providers\n                            .reduce(function (soFar, seenProvider, seenProviderIdx) {\n                            if (seenProviderIdx < providerIdx) {\n                                soFar.push(\"\" + stringifyType(seenProvider));\n                            }\n                            else if (seenProviderIdx == providerIdx) {\n                                soFar.push(\"?\" + stringifyType(seenProvider) + \"?\");\n                            }\n                            else if (seenProviderIdx == providerIdx + 1) {\n                                soFar.push('...');\n                            }\n                            return soFar;\n                        }, [])\n                            .join(', ');\n                        _this._reportError(util_2.syntaxError(\"Invalid \" + (debugInfo ?\n                            debugInfo :\n                            'provider') + \" - only instances of Provider and Type are allowed, got: [\" + providersInfo + \"]\"), type);\n                        return;\n                    }\n                    if (providerMeta.token ===\n                        _this._reflector.resolveExternalReference(identifiers_1.Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n                        targetEntryComponents.push.apply(targetEntryComponents, tslib_1.__spreadArray([], tslib_1.__read(_this._getEntryComponentsFromProvider(providerMeta, type))));\n                    }\n                    else {\n                        compileProviders.push(_this.getProviderMetadata(providerMeta));\n                    }\n                }\n            });\n            return compileProviders;\n        };\n        CompileMetadataResolver.prototype._validateProvider = function (provider) {\n            if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n                this._reportError(util_2.syntaxError(\"Invalid provider for \" + stringifyType(provider.provide) + \". useClass cannot be \" + provider.useClass + \".\\n           Usually it happens when:\\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\\n           2. Class was used before it was declared. Use forwardRef in this case.\"));\n            }\n        };\n        CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {\n            var _this = this;\n            var components = [];\n            var collectedIdentifiers = [];\n            if (provider.useFactory || provider.useExisting || provider.useClass) {\n                this._reportError(util_2.syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!\"), type);\n                return [];\n            }\n            if (!provider.multi) {\n                this._reportError(util_2.syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!\"), type);\n                return [];\n            }\n            extractIdentifiers(provider.useValue, collectedIdentifiers);\n            collectedIdentifiers.forEach(function (identifier) {\n                var entry = _this._getEntryComponentMetadata(identifier.reference, false);\n                if (entry) {\n                    components.push(entry);\n                }\n            });\n            return components;\n        };\n        CompileMetadataResolver.prototype._getEntryComponentMetadata = function (dirType, throwIfNotFound) {\n            if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n            var dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n            if (dirMeta && dirMeta.metadata.isComponent) {\n                return { componentType: dirType, componentFactory: dirMeta.metadata.componentFactory };\n            }\n            var dirSummary = this._loadSummary(dirType, cpl.CompileSummaryKind.Directive);\n            if (dirSummary && dirSummary.isComponent) {\n                return { componentType: dirType, componentFactory: dirSummary.componentFactory };\n            }\n            if (throwIfNotFound) {\n                throw util_2.syntaxError(dirType.name + \" cannot be used as an entry component.\");\n            }\n            return null;\n        };\n        CompileMetadataResolver.prototype._getInjectableTypeMetadata = function (type, dependencies) {\n            if (dependencies === void 0) { dependencies = null; }\n            var typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n            if (typeSummary) {\n                return typeSummary.type;\n            }\n            return this._getTypeMetadata(type, dependencies);\n        };\n        CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {\n            var compileDeps = undefined;\n            var compileTypeMetadata = null;\n            var compileFactoryMetadata = null;\n            var token = this._getTokenMetadata(provider.token);\n            if (provider.useClass) {\n                compileTypeMetadata =\n                    this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);\n                compileDeps = compileTypeMetadata.diDeps;\n                if (provider.token === provider.useClass) {\n                    // use the compileTypeMetadata as it contains information about lifecycleHooks...\n                    token = { identifier: compileTypeMetadata };\n                }\n            }\n            else if (provider.useFactory) {\n                compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n                compileDeps = compileFactoryMetadata.diDeps;\n            }\n            return {\n                token: token,\n                useClass: compileTypeMetadata,\n                useValue: provider.useValue,\n                useFactory: compileFactoryMetadata,\n                useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\n                deps: compileDeps,\n                multi: provider.multi\n            };\n        };\n        CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {\n            var _this = this;\n            var res = [];\n            Object.keys(queries).forEach(function (propertyName) {\n                var query = queries[propertyName];\n                if (query.isViewQuery === isViewQuery) {\n                    res.push(_this._getQueryMetadata(query, propertyName, directiveType));\n                }\n            });\n            return res;\n        };\n        CompileMetadataResolver.prototype._queryVarBindings = function (selector) {\n            return selector.split(/\\s*,\\s*/);\n        };\n        CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {\n            var _this = this;\n            var selectors;\n            if (typeof q.selector === 'string') {\n                selectors =\n                    this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });\n            }\n            else {\n                if (!q.selector) {\n                    this._reportError(util_2.syntaxError(\"Can't construct a query for the property \\\"\" + propertyName + \"\\\" of \\\"\" + stringifyType(typeOrFunc) + \"\\\" since the query selector wasn't defined.\"), typeOrFunc);\n                    selectors = [];\n                }\n                else {\n                    selectors = [this._getTokenMetadata(q.selector)];\n                }\n            }\n            return {\n                selectors: selectors,\n                first: q.first,\n                descendants: q.descendants,\n                emitDistinctChangesOnly: q.emitDistinctChangesOnly,\n                propertyName: propertyName,\n                read: q.read ? this._getTokenMetadata(q.read) : null,\n                static: q.static\n            };\n        };\n        CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {\n            if (this._errorCollector) {\n                this._errorCollector(error, type);\n                if (otherType) {\n                    this._errorCollector(error, otherType);\n                }\n            }\n            else {\n                throw error;\n            }\n        };\n        return CompileMetadataResolver;\n    }());\n    exports.CompileMetadataResolver = CompileMetadataResolver;\n    function flattenArray(tree, out) {\n        if (out === void 0) { out = []; }\n        if (tree) {\n            for (var i = 0; i < tree.length; i++) {\n                var item = util_2.resolveForwardRef(tree[i]);\n                if (Array.isArray(item)) {\n                    flattenArray(item, out);\n                }\n                else {\n                    out.push(item);\n                }\n            }\n        }\n        return out;\n    }\n    function dedupeArray(array) {\n        if (array) {\n            return Array.from(new Set(array));\n        }\n        return [];\n    }\n    function flattenAndDedupeArray(tree) {\n        return dedupeArray(flattenArray(tree));\n    }\n    function isValidType(value) {\n        return (value instanceof static_symbol_1.StaticSymbol) || (value instanceof core_1.Type);\n    }\n    function extractIdentifiers(value, targetIdentifiers) {\n        util_2.visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n    }\n    var _CompileValueConverter = /** @class */ (function (_super) {\n        tslib_1.__extends(_CompileValueConverter, _super);\n        function _CompileValueConverter() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {\n            targetIdentifiers.push({ reference: value });\n        };\n        return _CompileValueConverter;\n    }(util_2.ValueTransformer));\n    function stringifyType(type) {\n        if (type instanceof static_symbol_1.StaticSymbol) {\n            return type.name + \" in \" + type.filePath;\n        }\n        else {\n            return util_2.stringify(type);\n        }\n    }\n    /**\n     * Indicates that a component is still being loaded in a synchronous compile.\n     */\n    function componentStillLoadingError(compType) {\n        var error = Error(\"Can't compile synchronously as \" + util_2.stringify(compType) + \" is still being loaded!\");\n        error[exports.ERROR_COMPONENT_TYPE] = compType;\n        return error;\n    }\n});\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}